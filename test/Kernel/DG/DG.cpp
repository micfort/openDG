//////////////////////////////////////////////////////////////////////////
// This file is part of openPSTD.                                       //
//                                                                      //
// openPSTD is free software: you can redistribute it and/or modify     //
// it under the terms of the GNU General Public License as published by //
// the Free Software Foundation, either version 3 of the License, or    //
// (at your option) any later version.                                  //
//                                                                      //
// openPSTD is distributed in the hope that it will be useful,          //
// but WITHOUT ANY WARRANTY; without even the implied warranty of       //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        //
// GNU General Public License for more details.                         //
//                                                                      //
// You should have received a copy of the GNU General Public License    //
// along with openPSTD.  If not, see <http://www.gnu.org/licenses/>.    //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//
// Date: 3-6-2016
//
//
// Authors: M. R. Fortuin
//
//
// Purpose:
//
//
//////////////////////////////////////////////////////////////////////////

#ifdef STAND_ALONE
#   define BOOST_TEST_MODULE Main
#endif

#include <boost/test/unit_test.hpp>
#include <kernel/DG/DG.h>
#include <kernel/DG/RK.h>
#include <kernel/DG/Advec.h>

using namespace OpenPSTD::Kernel;
using namespace OpenPSTD::Kernel::DG;
using namespace std;
using namespace Eigen;

BOOST_AUTO_TEST_SUITE(DG)
    BOOST_AUTO_TEST_SUITE(DG_General)

        BOOST_AUTO_TEST_CASE(DG_General_x_start)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> xExpected(9,10);
            xExpected <<
                    0.000000000000000	,	0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,
                    0.010024200458854	,	0.210024200458854	,	0.410024200458854	,	0.610024200458854	,	0.810024200458854	,	1.010024200458850	,	1.210024200458850	,	1.410024200458850	,	1.610024200458850	,	1.810024200458850	,
                    0.032281372048926	,	0.232281372048926	,	0.432281372048926	,	0.632281372048926	,	0.832281372048926	,	1.032281372048920	,	1.232281372048920	,	1.432281372048920	,	1.632281372048920	,	1.832281372048920	,
                    0.063688253617382	,	0.263688253617382	,	0.463688253617382	,	0.663688253617382	,	0.863688253617382	,	1.063688253617380	,	1.263688253617380	,	1.463688253617380	,	1.663688253617380	,	1.863688253617380	,
                    0.100000000000000	,	0.300000000000000	,	0.500000000000000	,	0.700000000000000	,	0.900000000000000	,	1.100000000000000	,	1.300000000000000	,	1.500000000000000	,	1.700000000000000	,	1.900000000000000	,
                    0.136311746382618	,	0.336311746382618	,	0.536311746382618	,	0.736311746382618	,	0.936311746382618	,	1.136311746382610	,	1.336311746382610	,	1.536311746382610	,	1.736311746382610	,	1.936311746382610	,
                    0.167718627951074	,	0.367718627951074	,	0.567718627951074	,	0.767718627951074	,	0.967718627951074	,	1.167718627951070	,	1.367718627951070	,	1.567718627951070	,	1.767718627951070	,	1.967718627951070	,
                    0.189975799541146	,	0.389975799541146	,	0.589975799541146	,	0.789975799541146	,	0.989975799541146	,	1.189975799541140	,	1.389975799541140	,	1.589975799541140	,	1.789975799541140	,	1.989975799541140	,
                    0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,	2.000000000000000	;

            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);

            MatrixX<double> x(9,10);
            for(int k = 0; k  < K; k++)
            {
                x.col(k) = s->Elements[k]->x;
            }

            BOOST_CHECK(x.isApprox(xExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_x_start_80)
        {
            int K = 80;
            int N = 6;
            MatrixX<double> xExpected(N+1,K);
            xExpected <<
                    -1.000000000000000	,	-0.975000000000000	,	-0.950000000000000	,	-0.925000000000000	,	-0.900000000000000	,	-0.875000000000000	,	-0.850000000000000	,	-0.825000000000000	,	-0.800000000000000	,	-0.775000000000000	,	-0.750000000000000	,	-0.725000000000000	,	-0.700000000000000	,	-0.675000000000000	,	-0.650000000000000	,	-0.625000000000000	,	-0.600000000000000	,	-0.575000000000000	,	-0.550000000000000	,	-0.525000000000000	,	-0.500000000000000	,	-0.475000000000000	,	-0.450000000000000	,	-0.425000000000000	,	-0.400000000000000	,	-0.375000000000000	,	-0.350000000000000	,	-0.325000000000000	,	-0.300000000000000	,	-0.275000000000000	,	-0.250000000000000	,	-0.225000000000000	,	-0.200000000000000	,	-0.175000000000000	,	-0.150000000000000	,	-0.125000000000000	,	-0.100000000000000	,	-0.075000000000000	,	-0.050000000000000	,	-0.025000000000000	,	0.000000000000000	,	0.025000000000000	,	0.050000000000000	,	0.075000000000000	,	0.100000000000000	,	0.125000000000000	,	0.150000000000000	,	0.175000000000000	,	0.200000000000000	,	0.225000000000000	,	0.250000000000000	,	0.275000000000000	,	0.300000000000000	,	0.325000000000000	,	0.350000000000000	,	0.375000000000000	,	0.400000000000000	,	0.425000000000000	,	0.450000000000000	,	0.475000000000000	,	0.500000000000000	,	0.525000000000000	,	0.550000000000000	,	0.575000000000000	,	0.600000000000000	,	0.625000000000000	,	0.650000000000000	,	0.675000000000000	,	0.700000000000000	,	0.725000000000000	,	0.750000000000000	,	0.775000000000000	,	0.800000000000000	,	0.825000000000000	,	0.850000000000000	,	0.875000000000000	,	0.900000000000000	,	0.925000000000000	,	0.950000000000000	,	0.975000000000000	,
                    -0.997877798703482	,	-0.972877798703482	,	-0.947877798703482	,	-0.922877798703482	,	-0.897877798703482	,	-0.872877798703482	,	-0.847877798703482	,	-0.822877798703482	,	-0.797877798703482	,	-0.772877798703482	,	-0.747877798703482	,	-0.722877798703482	,	-0.697877798703482	,	-0.672877798703482	,	-0.647877798703482	,	-0.622877798703482	,	-0.597877798703482	,	-0.572877798703482	,	-0.547877798703482	,	-0.522877798703482	,	-0.497877798703482	,	-0.472877798703482	,	-0.447877798703482	,	-0.422877798703482	,	-0.397877798703482	,	-0.372877798703482	,	-0.347877798703482	,	-0.322877798703482	,	-0.297877798703482	,	-0.272877798703482	,	-0.247877798703482	,	-0.222877798703482	,	-0.197877798703482	,	-0.172877798703482	,	-0.147877798703482	,	-0.122877798703482	,	-0.097877798703482	,	-0.072877798703482	,	-0.047877798703482	,	-0.022877798703482	,	0.002122201296518	,	0.027122201296518	,	0.052122201296518	,	0.077122201296518	,	0.102122201296518	,	0.127122201296518	,	0.152122201296518	,	0.177122201296518	,	0.202122201296518	,	0.227122201296518	,	0.252122201296518	,	0.277122201296518	,	0.302122201296518	,	0.327122201296518	,	0.352122201296518	,	0.377122201296518	,	0.402122201296518	,	0.427122201296518	,	0.452122201296518	,	0.477122201296518	,	0.502122201296518	,	0.527122201296518	,	0.552122201296518	,	0.577122201296518	,	0.602122201296518	,	0.627122201296518	,	0.652122201296518	,	0.677122201296518	,	0.702122201296518	,	0.727122201296518	,	0.752122201296518	,	0.777122201296518	,	0.802122201296518	,	0.827122201296518	,	0.852122201296518	,	0.877122201296518	,	0.902122201296518	,	0.927122201296518	,	0.952122201296518	,	0.977122201296518	,
                    -0.993360609918384	,	-0.968360609918384	,	-0.943360609918384	,	-0.918360609918384	,	-0.893360609918384	,	-0.868360609918384	,	-0.843360609918384	,	-0.818360609918384	,	-0.793360609918384	,	-0.768360609918384	,	-0.743360609918384	,	-0.718360609918384	,	-0.693360609918384	,	-0.668360609918384	,	-0.643360609918384	,	-0.618360609918384	,	-0.593360609918384	,	-0.568360609918384	,	-0.543360609918384	,	-0.518360609918384	,	-0.493360609918384	,	-0.468360609918384	,	-0.443360609918384	,	-0.418360609918384	,	-0.393360609918384	,	-0.368360609918384	,	-0.343360609918384	,	-0.318360609918384	,	-0.293360609918384	,	-0.268360609918384	,	-0.243360609918384	,	-0.218360609918384	,	-0.193360609918384	,	-0.168360609918384	,	-0.143360609918384	,	-0.118360609918384	,	-0.093360609918384	,	-0.068360609918384	,	-0.043360609918384	,	-0.018360609918384	,	0.006639390081616	,	0.031639390081616	,	0.056639390081616	,	0.081639390081616	,	0.106639390081616	,	0.131639390081616	,	0.156639390081616	,	0.181639390081616	,	0.206639390081616	,	0.231639390081616	,	0.256639390081616	,	0.281639390081616	,	0.306639390081616	,	0.331639390081616	,	0.356639390081616	,	0.381639390081616	,	0.406639390081616	,	0.431639390081616	,	0.456639390081616	,	0.481639390081616	,	0.506639390081616	,	0.531639390081616	,	0.556639390081616	,	0.581639390081616	,	0.606639390081616	,	0.631639390081616	,	0.656639390081616	,	0.681639390081616	,	0.706639390081616	,	0.731639390081616	,	0.756639390081616	,	0.781639390081616	,	0.806639390081616	,	0.831639390081616	,	0.856639390081616	,	0.881639390081616	,	0.906639390081616	,	0.931639390081616	,	0.956639390081616	,	0.981639390081616	,
                    -0.987500000000000	,	-0.962500000000000	,	-0.937500000000000	,	-0.912500000000000	,	-0.887500000000000	,	-0.862500000000000	,	-0.837500000000000	,	-0.812500000000000	,	-0.787500000000000	,	-0.762500000000000	,	-0.737500000000000	,	-0.712500000000000	,	-0.687500000000000	,	-0.662500000000000	,	-0.637500000000000	,	-0.612500000000000	,	-0.587500000000000	,	-0.562500000000000	,	-0.537500000000000	,	-0.512500000000000	,	-0.487500000000000	,	-0.462500000000000	,	-0.437500000000000	,	-0.412500000000000	,	-0.387500000000000	,	-0.362500000000000	,	-0.337500000000000	,	-0.312500000000000	,	-0.287500000000000	,	-0.262500000000000	,	-0.237500000000000	,	-0.212500000000000	,	-0.187500000000000	,	-0.162500000000000	,	-0.137500000000000	,	-0.112500000000000	,	-0.087500000000000	,	-0.062500000000000	,	-0.037500000000000	,	-0.012500000000000	,	0.012500000000000	,	0.037500000000000	,	0.062500000000000	,	0.087500000000000	,	0.112500000000000	,	0.137500000000000	,	0.162500000000000	,	0.187500000000000	,	0.212500000000000	,	0.237500000000000	,	0.262500000000000	,	0.287500000000000	,	0.312500000000000	,	0.337500000000000	,	0.362500000000000	,	0.387500000000000	,	0.412500000000000	,	0.437500000000000	,	0.462500000000000	,	0.487500000000000	,	0.512500000000000	,	0.537500000000000	,	0.562500000000000	,	0.587500000000000	,	0.612500000000000	,	0.637500000000000	,	0.662500000000000	,	0.687500000000000	,	0.712500000000000	,	0.737500000000000	,	0.762500000000000	,	0.787500000000000	,	0.812500000000000	,	0.837500000000000	,	0.862500000000000	,	0.887500000000000	,	0.912500000000000	,	0.937500000000000	,	0.962500000000000	,	0.987500000000000	,
                    -0.981639390081616	,	-0.956639390081616	,	-0.931639390081616	,	-0.906639390081616	,	-0.881639390081616	,	-0.856639390081616	,	-0.831639390081616	,	-0.806639390081616	,	-0.781639390081616	,	-0.756639390081616	,	-0.731639390081616	,	-0.706639390081616	,	-0.681639390081616	,	-0.656639390081616	,	-0.631639390081616	,	-0.606639390081616	,	-0.581639390081616	,	-0.556639390081616	,	-0.531639390081616	,	-0.506639390081616	,	-0.481639390081616	,	-0.456639390081616	,	-0.431639390081616	,	-0.406639390081616	,	-0.381639390081616	,	-0.356639390081616	,	-0.331639390081616	,	-0.306639390081616	,	-0.281639390081616	,	-0.256639390081616	,	-0.231639390081616	,	-0.206639390081616	,	-0.181639390081616	,	-0.156639390081616	,	-0.131639390081616	,	-0.106639390081616	,	-0.081639390081616	,	-0.056639390081616	,	-0.031639390081616	,	-0.006639390081616	,	0.018360609918384	,	0.043360609918384	,	0.068360609918384	,	0.093360609918384	,	0.118360609918384	,	0.143360609918384	,	0.168360609918384	,	0.193360609918384	,	0.218360609918384	,	0.243360609918384	,	0.268360609918384	,	0.293360609918384	,	0.318360609918384	,	0.343360609918384	,	0.368360609918384	,	0.393360609918384	,	0.418360609918384	,	0.443360609918384	,	0.468360609918384	,	0.493360609918384	,	0.518360609918384	,	0.543360609918384	,	0.568360609918384	,	0.593360609918384	,	0.618360609918384	,	0.643360609918384	,	0.668360609918384	,	0.693360609918384	,	0.718360609918384	,	0.743360609918384	,	0.768360609918384	,	0.793360609918384	,	0.818360609918384	,	0.843360609918384	,	0.868360609918384	,	0.893360609918384	,	0.918360609918384	,	0.943360609918384	,	0.968360609918384	,	0.993360609918384	,
                    -0.977122201296518	,	-0.952122201296518	,	-0.927122201296518	,	-0.902122201296518	,	-0.877122201296518	,	-0.852122201296518	,	-0.827122201296518	,	-0.802122201296518	,	-0.777122201296518	,	-0.752122201296518	,	-0.727122201296518	,	-0.702122201296518	,	-0.677122201296518	,	-0.652122201296518	,	-0.627122201296518	,	-0.602122201296518	,	-0.577122201296518	,	-0.552122201296518	,	-0.527122201296518	,	-0.502122201296518	,	-0.477122201296518	,	-0.452122201296518	,	-0.427122201296518	,	-0.402122201296518	,	-0.377122201296518	,	-0.352122201296518	,	-0.327122201296518	,	-0.302122201296518	,	-0.277122201296518	,	-0.252122201296518	,	-0.227122201296518	,	-0.202122201296518	,	-0.177122201296518	,	-0.152122201296518	,	-0.127122201296518	,	-0.102122201296518	,	-0.077122201296518	,	-0.052122201296518	,	-0.027122201296518	,	-0.002122201296518	,	0.022877798703482	,	0.047877798703482	,	0.072877798703482	,	0.097877798703482	,	0.122877798703482	,	0.147877798703482	,	0.172877798703482	,	0.197877798703482	,	0.222877798703482	,	0.247877798703482	,	0.272877798703482	,	0.297877798703482	,	0.322877798703482	,	0.347877798703482	,	0.372877798703482	,	0.397877798703482	,	0.422877798703482	,	0.447877798703482	,	0.472877798703482	,	0.497877798703482	,	0.522877798703482	,	0.547877798703482	,	0.572877798703482	,	0.597877798703482	,	0.622877798703482	,	0.647877798703482	,	0.672877798703482	,	0.697877798703482	,	0.722877798703482	,	0.747877798703482	,	0.772877798703482	,	0.797877798703482	,	0.822877798703482	,	0.847877798703482	,	0.872877798703482	,	0.897877798703482	,	0.922877798703482	,	0.947877798703482	,	0.972877798703482	,	0.997877798703482	,
                    -0.975000000000000	,	-0.950000000000000	,	-0.925000000000000	,	-0.900000000000000	,	-0.875000000000000	,	-0.850000000000000	,	-0.825000000000000	,	-0.800000000000000	,	-0.775000000000000	,	-0.750000000000000	,	-0.725000000000000	,	-0.700000000000000	,	-0.675000000000000	,	-0.650000000000000	,	-0.625000000000000	,	-0.600000000000000	,	-0.575000000000000	,	-0.550000000000000	,	-0.525000000000000	,	-0.500000000000000	,	-0.475000000000000	,	-0.450000000000000	,	-0.425000000000000	,	-0.400000000000000	,	-0.375000000000000	,	-0.350000000000000	,	-0.325000000000000	,	-0.300000000000000	,	-0.275000000000000	,	-0.250000000000000	,	-0.225000000000000	,	-0.200000000000000	,	-0.175000000000000	,	-0.150000000000000	,	-0.125000000000000	,	-0.100000000000000	,	-0.075000000000000	,	-0.050000000000000	,	-0.025000000000000	,	0.000000000000000	,	0.025000000000000	,	0.050000000000000	,	0.075000000000000	,	0.100000000000000	,	0.125000000000000	,	0.150000000000000	,	0.175000000000000	,	0.200000000000000	,	0.225000000000000	,	0.250000000000000	,	0.275000000000000	,	0.300000000000000	,	0.325000000000000	,	0.350000000000000	,	0.375000000000000	,	0.400000000000000	,	0.425000000000000	,	0.450000000000000	,	0.475000000000000	,	0.500000000000000	,	0.525000000000000	,	0.550000000000000	,	0.575000000000000	,	0.600000000000000	,	0.625000000000000	,	0.650000000000000	,	0.675000000000000	,	0.700000000000000	,	0.725000000000000	,	0.750000000000000	,	0.775000000000000	,	0.800000000000000	,	0.825000000000000	,	0.850000000000000	,	0.875000000000000	,	0.900000000000000	,	0.925000000000000	,	0.950000000000000	,	0.975000000000000	,	1.000000000000000	;


            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -1.0, 1.0, de);

            MatrixX<double> x(N+1,K);
            for(int k = 0; k  < K; k++)
            {
                x.col(k) = s->Elements[k]->x;
            }

            BOOST_CHECK(x.isApprox(xExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_vertices_start)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> xExpected(2,10);
            xExpected <<
            0.000000000000000	,	0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,
                    0.200000000000000	,	0.400000000000000	,	0.600000000000000	,	0.800000000000000	,	1.000000000000000	,	1.200000000000000	,	1.400000000000000	,	1.600000000000000	,	1.800000000000000	,	2.000000000000000	;

            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);

            MatrixX<double> x(2,10);
            for(int k = 0; k  < K; k++)
            {
                x(0, k) = s->Elements[k]->Faces[0]->Vertex.lock()->x;
                x(1, k) = s->Elements[k]->Faces[1]->Vertex.lock()->x;
            }

            BOOST_CHECK(x.isApprox(xExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_vertices_start_80)
        {
            int K = 80;
            int N = 6;
            MatrixX<double> xExpected(2,K);
            xExpected <<
                    -1.000000000000000	,	-0.975000000000000	,	-0.950000000000000	,	-0.925000000000000	,	-0.900000000000000	,	-0.875000000000000	,	-0.850000000000000	,	-0.825000000000000	,	-0.800000000000000	,	-0.775000000000000	,	-0.750000000000000	,	-0.725000000000000	,	-0.700000000000000	,	-0.675000000000000	,	-0.650000000000000	,	-0.625000000000000	,	-0.600000000000000	,	-0.575000000000000	,	-0.550000000000000	,	-0.525000000000000	,	-0.500000000000000	,	-0.475000000000000	,	-0.450000000000000	,	-0.425000000000000	,	-0.400000000000000	,	-0.375000000000000	,	-0.350000000000000	,	-0.325000000000000	,	-0.300000000000000	,	-0.275000000000000	,	-0.250000000000000	,	-0.225000000000000	,	-0.200000000000000	,	-0.175000000000000	,	-0.150000000000000	,	-0.125000000000000	,	-0.100000000000000	,	-0.075000000000000	,	-0.050000000000000	,	-0.025000000000000	,	0.000000000000000	,	0.025000000000000	,	0.050000000000000	,	0.075000000000000	,	0.100000000000000	,	0.125000000000000	,	0.150000000000000	,	0.175000000000000	,	0.200000000000000	,	0.225000000000000	,	0.250000000000000	,	0.275000000000000	,	0.300000000000000	,	0.325000000000000	,	0.350000000000000	,	0.375000000000000	,	0.400000000000000	,	0.425000000000000	,	0.450000000000000	,	0.475000000000000	,	0.500000000000000	,	0.525000000000000	,	0.550000000000000	,	0.575000000000000	,	0.600000000000000	,	0.625000000000000	,	0.650000000000000	,	0.675000000000000	,	0.700000000000000	,	0.725000000000000	,	0.750000000000000	,	0.775000000000000	,	0.800000000000000	,	0.825000000000000	,	0.850000000000000	,	0.875000000000000	,	0.900000000000000	,	0.925000000000000	,	0.950000000000000	,	0.975000000000000	,
                    -0.975000000000000	,	-0.950000000000000	,	-0.925000000000000	,	-0.900000000000000	,	-0.875000000000000	,	-0.850000000000000	,	-0.825000000000000	,	-0.800000000000000	,	-0.775000000000000	,	-0.750000000000000	,	-0.725000000000000	,	-0.700000000000000	,	-0.675000000000000	,	-0.650000000000000	,	-0.625000000000000	,	-0.600000000000000	,	-0.575000000000000	,	-0.550000000000000	,	-0.525000000000000	,	-0.500000000000000	,	-0.475000000000000	,	-0.450000000000000	,	-0.425000000000000	,	-0.400000000000000	,	-0.375000000000000	,	-0.350000000000000	,	-0.325000000000000	,	-0.300000000000000	,	-0.275000000000000	,	-0.250000000000000	,	-0.225000000000000	,	-0.200000000000000	,	-0.175000000000000	,	-0.150000000000000	,	-0.125000000000000	,	-0.100000000000000	,	-0.075000000000000	,	-0.050000000000000	,	-0.025000000000000	,	0.000000000000000	,	0.025000000000000	,	0.050000000000000	,	0.075000000000000	,	0.100000000000000	,	0.125000000000000	,	0.150000000000000	,	0.175000000000000	,	0.200000000000000	,	0.225000000000000	,	0.250000000000000	,	0.275000000000000	,	0.300000000000000	,	0.325000000000000	,	0.350000000000000	,	0.375000000000000	,	0.400000000000000	,	0.425000000000000	,	0.450000000000000	,	0.475000000000000	,	0.500000000000000	,	0.525000000000000	,	0.550000000000000	,	0.575000000000000	,	0.600000000000000	,	0.625000000000000	,	0.650000000000000	,	0.675000000000000	,	0.700000000000000	,	0.725000000000000	,	0.750000000000000	,	0.775000000000000	,	0.800000000000000	,	0.825000000000000	,	0.850000000000000	,	0.875000000000000	,	0.900000000000000	,	0.925000000000000	,	0.950000000000000	,	0.975000000000000	,	1.000000000000000	;



            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -1.0, 1.0, de);

            MatrixX<double> x(2,K);
            for(int k = 0; k  < K; k++)
            {
                x(0, k) = s->Elements[k]->Faces[0]->Vertex.lock()->x;
                x(1, k) = s->Elements[k]->Faces[1]->Vertex.lock()->x;
            }

            BOOST_CHECK(x.isApprox(xExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_Normals_start)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> xExpected(2,10);
            xExpected <<
                    -1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,	-1.000000000000000	,
                    1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	,	1.000000000000000	;


            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);

            MatrixX<double> x(2,10);
            for(int k = 0; k  < K; k++)
            {
                x(0, k) = s->Elements[k]->Faces[0]->Normal[0];
                x(1, k) = s->Elements[k]->Faces[1]->Normal[0];
            }

            BOOST_CHECK(x.isApprox(xExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_Normals_start_80)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> nExpected(2,K);
            for(int k = 0; k  < K; k++)
            {
                nExpected(0, k) = -1;
                nExpected(1, k) = 1;
            }

            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -1.0, 1.0, de);

            MatrixX<double> n(2,K);
            for(int k = 0; k  < K; k++)
            {
                n(0, k) = s->Elements[k]->Faces[0]->Normal[0];
                n(1, k) = s->Elements[k]->Faces[1]->Normal[0];
            }

            BOOST_CHECK(n.isApprox(nExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_rx_start_80)
        {
            int K = 80;
            int N = 6;
            MatrixX<double> rxExpected(N+1,K);
            rxExpected <<
                    80.000000000004900	,	80.000000000002400	,	79.999999999991000	,	79.999999999999900	,	79.999999999988900	,	80.000000000003400	,	80.000000000000900	,	79.999999999993800	,	80.000000000005600	,	79.999999999992400	,	80.000000000009100	,	80.000000000001700	,	80.000000000000200	,	80.000000000002000	,	80.000000000000900	,	79.999999999999200	,	80.000000000003100	,	80.000000000004500	,	80.000000000004900	,	80.000000000002400	,	79.999999999999200	,	79.999999999995300	,	79.999999999995300	,	79.999999999999200	,	80.000000000000900	,	79.999999999996000	,	80.000000000000200	,	79.999999999997000	,	79.999999999995300	,	79.999999999998800	,	79.999999999996700	,	79.999999999998500	,	79.999999999998600	,	79.999999999997200	,	79.999999999998600	,	79.999999999999700	,	79.999999999999300	,	79.999999999999800	,	79.999999999999600	,	79.999999999999500	,	80.000000000000200	,	79.999999999999800	,	80.000000000000900	,	80.000000000000600	,	80.000000000000400	,	80.000000000000100	,	80.000000000000900	,	79.999999999999200	,	80.000000000001300	,	80.000000000000900	,	79.999999999999200	,	80.000000000002400	,	80.000000000002000	,	80.000000000002400	,	80.000000000003800	,	80.000000000003800	,	80.000000000000900	,	80.000000000004500	,	80.000000000003100	,	80.000000000005200	,	80.000000000011600	,	79.999999999996000	,	80.000000000005900	,	80.000000000000200	,	80.000000000007300	,	80.000000000007300	,	79.999999999993100	,	80.000000000015900	,	80.000000000001700	,	80.000000000011600	,	80.000000000010200	,	79.999999999995300	,	79.999999999998100	,	80.000000000005900	,	80.000000000011600	,	80.000000000008800	,	79.999999999999500	,	80.000000000000900	,	80.000000000000200	,	80.000000000015900	,
                    80.000000000005900	,	80.000000000007300	,	80.000000000004100	,	80.000000000004900	,	80.000000000006300	,	80.000000000007700	,	80.000000000006600	,	80.000000000006300	,	80.000000000005900	,	80.000000000004500	,	80.000000000004500	,	80.000000000005900	,	80.000000000005600	,	80.000000000003800	,	80.000000000005200	,	80.000000000003400	,	80.000000000006300	,	80.000000000004400	,	80.000000000002700	,	80.000000000003800	,	80.000000000003400	,	80.000000000002100	,	80.000000000003300	,	80.000000000002700	,	80.000000000003400	,	80.000000000002000	,	80.000000000003000	,	80.000000000001700	,	80.000000000001100	,	80.000000000001800	,	80.000000000001900	,	80.000000000002000	,	80.000000000000900	,	80.000000000001300	,	80.000000000000800	,	80.000000000000600	,	80.000000000000200	,	80.000000000001000	,	80.000000000000200	,	80.000000000000100	,	80.000000000000200	,	79.999999999999400	,	79.999999999999900	,	79.999999999999100	,	79.999999999999600	,	79.999999999999600	,	79.999999999999200	,	79.999999999999000	,	79.999999999998800	,	79.999999999998800	,	79.999999999998900	,	79.999999999997500	,	79.999999999997700	,	79.999999999997900	,	79.999999999996700	,	79.999999999997900	,	79.999999999997100	,	79.999999999998000	,	79.999999999996900	,	79.999999999997000	,	79.999999999997600	,	79.999999999997100	,	79.999999999996700	,	79.999999999999000	,	79.999999999995600	,	79.999999999995400	,	79.999999999997400	,	79.999999999997000	,	79.999999999996200	,	79.999999999995600	,	79.999999999996200	,	79.999999999995300	,	79.999999999994900	,	79.999999999995400	,	79.999999999996300	,	79.999999999993000	,	79.999999999994900	,	79.999999999996000	,	79.999999999992200	,	79.999999999996000	,
                    80.000000000000800	,	79.999999999997600	,	80.000000000001500	,	80.000000000001100	,	79.999999999999500	,	80.000000000000800	,	80.000000000000400	,	80.000000000000400	,	80.000000000000400	,	79.999999999998500	,	80.000000000000400	,	79.999999999996900	,	79.999999999999700	,	80.000000000001100	,	79.999999999999200	,	80.000000000000400	,	79.999999999997600	,	79.999999999999700	,	80.000000000000500	,	79.999999999999900	,	80.000000000000700	,	79.999999999999400	,	80.000000000000800	,	79.999999999999400	,	80.000000000000800	,	79.999999999999600	,	80.000000000000200	,	80.000000000000100	,	80.000000000000500	,	80.000000000000400	,	80.000000000000000	,	79.999999999999700	,	80.000000000000500	,	79.999999999999900	,	80.000000000000100	,	80.000000000000000	,	80.000000000000000	,	80.000000000000200	,	79.999999999999900	,	79.999999999999900	,	80.000000000000200	,	79.999999999999500	,	80.000000000000300	,	79.999999999999400	,	80.000000000000100	,	80.000000000000300	,	79.999999999999500	,	80.000000000000500	,	79.999999999999600	,	80.000000000000100	,	80.000000000000500	,	79.999999999998100	,	80.000000000000400	,	79.999999999998900	,	80.000000000000100	,	80.000000000000500	,	79.999999999998600	,	80.000000000000100	,	79.999999999997500	,	80.000000000000600	,	79.999999999998700	,	80.000000000001800	,	79.999999999999700	,	79.999999999999500	,	79.999999999998800	,	79.999999999998800	,	80.000000000001800	,	80.000000000000400	,	79.999999999998100	,	79.999999999998100	,	79.999999999997400	,	80.000000000001100	,	79.999999999997200	,	79.999999999999900	,	80.000000000000200	,	79.999999999997700	,	80.000000000001800	,	79.999999999997900	,	79.999999999999900	,	79.999999999998100	,
                    79.999999999999900	,	80.000000000000200	,	80.000000000001300	,	79.999999999999900	,	79.999999999998800	,	79.999999999999500	,	80.000000000000200	,	80.000000000000900	,	79.999999999999500	,	80.000000000000200	,	80.000000000000800	,	79.999999999999900	,	80.000000000000800	,	79.999999999999400	,	79.999999999999900	,	79.999999999998500	,	79.999999999999000	,	80.000000000001300	,	80.000000000000200	,	80.000000000000100	,	79.999999999999500	,	80.000000000000200	,	80.000000000001100	,	80.000000000000200	,	79.999999999998800	,	80.000000000000400	,	80.000000000000300	,	80.000000000000900	,	80.000000000000100	,	79.999999999999300	,	79.999999999999500	,	79.999999999999800	,	80.000000000000100	,	79.999999999999300	,	79.999999999999900	,	79.999999999999800	,	79.999999999999900	,	80.000000000000100	,	79.999999999999900	,	79.999999999999800	,	80.000000000000200	,	79.999999999999600	,	80.000000000000100	,	79.999999999999500	,	79.999999999999800	,	79.999999999999800	,	79.999999999999300	,	80.000000000000300	,	79.999999999998700	,	80.000000000000100	,	80.000000000000700	,	80.000000000000300	,	80.000000000000500	,	80.000000000000500	,	79.999999999999900	,	80.000000000001100	,	80.000000000000100	,	80.000000000000200	,	80.000000000000600	,	80.000000000000100	,	80.000000000001300	,	79.999999999996700	,	80.000000000000800	,	79.999999999998300	,	80.000000000002000	,	80.000000000000800	,	79.999999999998300	,	80.000000000001300	,	79.999999999998800	,	80.000000000001700	,	80.000000000001800	,	79.999999999996700	,	80.000000000000200	,	79.999999999996300	,	80.000000000000200	,	80.000000000000200	,	79.999999999997700	,	80.000000000001700	,	79.999999999997700	,	80.000000000001300	,
                    79.999999999999500	,	79.999999999998100	,	80.000000000003100	,	79.999999999998800	,	80.000000000000900	,	80.000000000000200	,	80.000000000001700	,	80.000000000000900	,	80.000000000001300	,	80.000000000001700	,	79.999999999999200	,	80.000000000001300	,	79.999999999998500	,	79.999999999999200	,	80.000000000002400	,	80.000000000001300	,	80.000000000002000	,	79.999999999999900	,	80.000000000000600	,	80.000000000001700	,	79.999999999999900	,	79.999999999999900	,	80.000000000001300	,	80.000000000000600	,	79.999999999999500	,	80.000000000000100	,	79.999999999999900	,	80.000000000000900	,	80.000000000000100	,	80.000000000000600	,	80.000000000000400	,	80.000000000000200	,	80.000000000000600	,	80.000000000000100	,	80.000000000000100	,	79.999999999999900	,	79.999999999999800	,	80.000000000000500	,	80.000000000000000	,	79.999999999999900	,	80.000000000000200	,	79.999999999999400	,	80.000000000000200	,	79.999999999999400	,	80.000000000000100	,	80.000000000000100	,	79.999999999999500	,	79.999999999999900	,	79.999999999999200	,	80.000000000000600	,	79.999999999999900	,	79.999999999998800	,	79.999999999999500	,	79.999999999998800	,	79.999999999999500	,	80.000000000000900	,	79.999999999998500	,	79.999999999999900	,	79.999999999998100	,	79.999999999998100	,	79.999999999999500	,	80.000000000000600	,	79.999999999997700	,	79.999999999999500	,	79.999999999997400	,	79.999999999998100	,	80.000000000000600	,	79.999999999999200	,	80.000000000000200	,	79.999999999997400	,	79.999999999997400	,	79.999999999998100	,	79.999999999997400	,	80.000000000000900	,	79.999999999998100	,	79.999999999999500	,	80.000000000000200	,	79.999999999999500	,	80.000000000000200	,	79.999999999997400	,
                    80.000000000004500	,	80.000000000001700	,	80.000000000004500	,	80.000000000004500	,	80.000000000001700	,	80.000000000001700	,	80.000000000004500	,	80.000000000001700	,	80.000000000004500	,	80.000000000001700	,	80.000000000003100	,	80.000000000001700	,	80.000000000004500	,	80.000000000001700	,	80.000000000004500	,	80.000000000004500	,	80.000000000001700	,	80.000000000001700	,	80.000000000003100	,	80.000000000001700	,	80.000000000001700	,	80.000000000001700	,	80.000000000000200	,	80.000000000000900	,	80.000000000000200	,	80.000000000001700	,	80.000000000000900	,	79.999999999999500	,	80.000000000000900	,	80.000000000000200	,	80.000000000000900	,	80.000000000000600	,	80.000000000000600	,	79.999999999999900	,	80.000000000000200	,	80.000000000000400	,	80.000000000000200	,	80.000000000000300	,	80.000000000000000	,	80.000000000000000	,	80.000000000000200	,	79.999999999999400	,	80.000000000000400	,	79.999999999999200	,	80.000000000000200	,	79.999999999999900	,	79.999999999999500	,	79.999999999999900	,	79.999999999998800	,	80.000000000000200	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999997400	,	79.999999999998800	,	79.999999999998800	,	80.000000000000200	,	79.999999999997400	,	79.999999999996000	,	79.999999999998800	,	79.999999999998800	,	79.999999999997400	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999997400	,	79.999999999997400	,	80.000000000000200	,	79.999999999997400	,	79.999999999998800	,	79.999999999998800	,	79.999999999997400	,	79.999999999996000	,	80.000000000001700	,	79.999999999996000	,	79.999999999996000	,	79.999999999998800	,	79.999999999996000	,	79.999999999996000	,	79.999999999998800	,
                    80.000000000004500	,	79.999999999993100	,	80.000000000015900	,	80.000000000004500	,	79.999999999993100	,	80.000000000004500	,	79.999999999993100	,	80.000000000004500	,	79.999999999993100	,	80.000000000004500	,	79.999999999993100	,	79.999999999993100	,	80.000000000010200	,	79.999999999998800	,	80.000000000004500	,	79.999999999998800	,	80.000000000004500	,	80.000000000015900	,	79.999999999993100	,	79.999999999998800	,	79.999999999998800	,	80.000000000004500	,	79.999999999993100	,	79.999999999998800	,	80.000000000001700	,	80.000000000001700	,	79.999999999998800	,	80.000000000001700	,	80.000000000001700	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	80.000000000001700	,	80.000000000001700	,	80.000000000001700	,	80.000000000001700	,	80.000000000000900	,	79.999999999999500	,	79.999999999999900	,	79.999999999999900	,	80.000000000000200	,	79.999999999999500	,	79.999999999999500	,	80.000000000000200	,	79.999999999998800	,	79.999999999997400	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999996000	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	80.000000000004500	,	79.999999999998800	,	79.999999999998800	,	79.999999999993100	,	80.000000000004500	,	79.999999999987400	,	79.999999999998800	,	80.000000000004500	,	79.999999999998800	,	80.000000000004500	,	79.999999999987400	,	79.999999999998800	,	80.000000000004500	,	80.000000000004500	,	79.999999999993100	,	79.999999999993100	,	80.000000000004500	,	80.000000000004500	,	79.999999999993100	,	79.999999999993100	,	79.999999999993100	,	80.000000000004500	;



            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -1.0, 1.0, de);

            MatrixX<double> rx(N+1,K);
            for(int k = 0; k < K; k++)
            {
                rx.col(k) = s->Elements[k]->rx;
            }

            BOOST_CHECK(rx.isApprox(rxExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_fscale_start)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> fscaleExpected(2,10);
            fscaleExpected <<
                    9.999999999999990	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000000	,	10.000000000000300	,	10.000000000000300	,	10.000000000000300	,	10.000000000000700	,	9.999999999999760	,
                    10.000000000000000	,	9.999999999999940	,	9.999999999999850	,	10.000000000000000	,	9.999999999999850	,	10.000000000000200	,	9.999999999999500	,	9.999999999999850	,	10.000000000000500	,	9.999999999999140	;

            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);

            MatrixX<double> fscale(2,10);
            for(int k = 0; k  < K; k++)
            {
                fscale.col(k) = s->Elements[k]->Fscale;
            }

            BOOST_CHECK(fscale.isApprox(fscaleExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_General_fscale_start_80)
        {
            int K = 80;
            int N = 6;
            MatrixX<double> fscaleExpected(2,K);
            fscaleExpected <<
                            80.000000000004900	,	80.000000000002400	,	79.999999999991000	,	79.999999999999900	,	79.999999999988900	,	80.000000000003400	,	80.000000000000900	,	79.999999999993800	,	80.000000000005600	,	79.999999999992400	,	80.000000000009100	,	80.000000000001700	,	80.000000000000200	,	80.000000000002000	,	80.000000000000900	,	79.999999999999200	,	80.000000000003100	,	80.000000000004500	,	80.000000000004900	,	80.000000000002400	,	79.999999999999200	,	79.999999999995300	,	79.999999999995300	,	79.999999999999200	,	80.000000000000900	,	79.999999999996000	,	80.000000000000200	,	79.999999999997000	,	79.999999999995300	,	79.999999999998800	,	79.999999999996700	,	79.999999999998500	,	79.999999999998600	,	79.999999999997200	,	79.999999999998600	,	79.999999999999700	,	79.999999999999300	,	79.999999999999800	,	79.999999999999600	,	79.999999999999500	,	80.000000000000200	,	79.999999999999800	,	80.000000000000900	,	80.000000000000600	,	80.000000000000400	,	80.000000000000100	,	80.000000000000900	,	79.999999999999200	,	80.000000000001300	,	80.000000000000900	,	79.999999999999200	,	80.000000000002400	,	80.000000000002000	,	80.000000000002400	,	80.000000000003800	,	80.000000000003800	,	80.000000000000900	,	80.000000000004500	,	80.000000000003100	,	80.000000000005200	,	80.000000000011600	,	79.999999999996000	,	80.000000000005900	,	80.000000000000200	,	80.000000000007300	,	80.000000000007300	,	79.999999999993100	,	80.000000000015900	,	80.000000000001700	,	80.000000000011600	,	80.000000000010200	,	79.999999999995300	,	79.999999999998100	,	80.000000000005900	,	80.000000000011600	,	80.000000000008800	,	79.999999999999500	,	80.000000000000900	,	80.000000000000200	,	80.000000000015900	,
                            80.000000000004500	,	79.999999999993100	,	80.000000000015900	,	80.000000000004500	,	79.999999999993100	,	80.000000000004500	,	79.999999999993100	,	80.000000000004500	,	79.999999999993100	,	80.000000000004500	,	79.999999999993100	,	79.999999999993100	,	80.000000000010200	,	79.999999999998800	,	80.000000000004500	,	79.999999999998800	,	80.000000000004500	,	80.000000000015900	,	79.999999999993100	,	79.999999999998800	,	79.999999999998800	,	80.000000000004500	,	79.999999999993100	,	79.999999999998800	,	80.000000000001700	,	80.000000000001700	,	79.999999999998800	,	80.000000000001700	,	80.000000000001700	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	80.000000000001700	,	80.000000000001700	,	80.000000000001700	,	80.000000000001700	,	80.000000000000900	,	79.999999999999500	,	79.999999999999900	,	79.999999999999900	,	80.000000000000200	,	79.999999999999500	,	79.999999999999500	,	80.000000000000200	,	79.999999999998800	,	79.999999999997400	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	79.999999999996000	,	79.999999999998800	,	79.999999999998800	,	79.999999999998800	,	80.000000000004500	,	79.999999999998800	,	79.999999999998800	,	79.999999999993100	,	80.000000000004500	,	79.999999999987400	,	79.999999999998800	,	80.000000000004500	,	79.999999999998800	,	80.000000000004500	,	79.999999999987400	,	79.999999999998800	,	80.000000000004500	,	80.000000000004500	,	79.999999999993100	,	79.999999999993100	,	80.000000000004500	,	80.000000000004500	,	79.999999999993100	,	79.999999999993100	,	79.999999999993100	,	80.000000000004500	;


            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -1.0, 1.0, de);

            MatrixX<double> fscale(2,K);
            for(int k = 0; k  < K; k++)
            {
                fscale.col(k) = s->Elements[k]->Fscale;
            }

            BOOST_CHECK(fscale.isApprox(fscaleExpected));
        }
    BOOST_AUTO_TEST_SUITE_END()
BOOST_AUTO_TEST_SUITE_END()