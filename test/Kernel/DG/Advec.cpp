//////////////////////////////////////////////////////////////////////////
// This file is part of openPSTD.                                       //
//                                                                      //
// openPSTD is free software: you can redistribute it and/or modify     //
// it under the terms of the GNU General Public License as published by //
// the Free Software Foundation, either version 3 of the License, or    //
// (at your option) any later version.                                  //
//                                                                      //
// openPSTD is distributed in the hope that it will be useful,          //
// but WITHOUT ANY WARRANTY; without even the implied warranty of       //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        //
// GNU General Public License for more details.                         //
//                                                                      //
// You should have received a copy of the GNU General Public License    //
// along with openPSTD.  If not, see <http://www.gnu.org/licenses/>.    //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//
// Date: 13-6-2016
//
//
// Authors: M. R. Fortuin
//
//
// Purpose:
//
//
//////////////////////////////////////////////////////////////////////////
#ifdef STAND_ALONE
#   define BOOST_TEST_MODULE Main
#endif

#include <boost/test/unit_test.hpp>
#include <kernel/DG/DG.h>
#include <kernel/DG/RK.h>
#include <kernel/DG/Advec.h>

using namespace OpenPSTD::Kernel;
using namespace OpenPSTD::Kernel::DG;
using namespace std;
using namespace Eigen;

BOOST_AUTO_TEST_SUITE(DG)
    BOOST_AUTO_TEST_SUITE(DG_Advec)

        BOOST_AUTO_TEST_CASE(DG_Advec_u_start)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> uExpected(9,10);
            uExpected <<
                      0.000000000000000	,	0.198669330795061	,	0.389418342308651	,	0.564642473395035	,	0.717356090899523	,	0.841470984807897	,	0.932039085967226	,	0.985449729988460	,	0.999573603041505	,	0.973847630878195	,
                    0.010024032580077	,	0.208483568581963	,	0.398631522612432	,	0.572887295790857	,	0.724303860336504	,	0.846844715643539	,	0.935624544510901	,	0.987103975322600	,	0.999230685624911	,	0.971521221746129	,
                    0.032275765674792	,	0.230198223634574	,	0.418943404850547	,	0.590986634567493	,	0.739469092130404	,	0.858471250519737	,	0.943248869213535	,	0.990422132085723	,	0.998110390009427	,	0.966007136402930	,
                    0.063645207033602	,	0.260643086584852	,	0.447249948780786	,	0.616026366897660	,	0.760243757749939	,	0.874152629068637	,	0.953211793614508	,	0.994269411982728	,	0.995688646493764	,	0.957412916746314	,
                    0.099833416646828	,	0.295520206661340	,	0.479425538604203	,	0.644217687237691	,	0.783326909627483	,	0.891207360061435	,	0.963558185417193	,	0.997494986604054	,	0.991664810452469	,	0.946300087687414	,
                    0.135890006078012	,	0.330007713473008	,	0.510969054731396	,	0.671559672233738	,	0.805377324833216	,	0.907087125006709	,	0.972634223985137	,	0.999405465778060	,	0.986333565456734	,	0.933939658436203	,
                    0.166933425210375	,	0.359487507221291	,	0.537709956747723	,	0.694495607140515	,	0.823593909284237	,	0.919858121265669	,	0.979450492732399	,	0.999995263888652	,	0.980673379541202	,	0.922255142245249	,
                    0.188835129968113	,	0.380166031788186	,	0.556340913604151	,	0.710336238829995	,	0.836012699809313	,	0.928359972637866	,	0.983696462966651	,	0.999816079550653	,	0.976076184145059	,	0.913423211464118	,
                    0.198669330795061	,	0.389418342308651	,	0.564642473395035	,	0.717356090899523	,	0.841470984807897	,	0.932039085967226	,	0.985449729988460	,	0.999573603041505	,	0.973847630878195	,	0.909297426825682	;

            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);

            MatrixX<double> u(9,10);
            for(int k = 0; k  < K; k++)
            {
                u.col(k) = s->Elements[k]->u[0];
            }

            BOOST_CHECK(u.isApprox(uExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_Advec_step_1_flux)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> RHSExpected(9, 10);
            RHSExpected <<
                        -6.283185307179560	,	-6.157939921949880	,	-5.787196904535120	,	-5.185736609092460	,	-4.377537359583470	,	-3.394819509665950	,	-2.276760918870500	,	-1.067935054974070	,	0.183466009499888	,	1.427552863136260	,
                    -6.282869628158070	,	-6.145117773990960	,	-5.762379466215310	,	-5.149913273361650	,	-4.332136289790100	,	-3.341650703191310	,	-2.217944048244800	,	-1.005814963222010	,	0.246412790351812	,	1.488816843574790	,
                    -6.279911778664460	,	-6.114442575278740	,	-5.705209841655980	,	-5.068528395477190	,	-4.229780716836970	,	-3.222405028861380	,	-2.086562221272140	,	-0.867534762448730	,	0.386078569689313	,	1.624300167595190	,
                    -6.270446705737150	,	-6.066008445955480	,	-5.619737571830170	,	-4.949425494823370	,	-4.081795442153360	,	-3.051437086055030	,	-1.899427562702260	,	-0.671693856414820	,	0.582818164275301	,	1.814095063944890	,
                    -6.251795551857360	,	-6.002556191886530	,	-5.514013858706580	,	-4.805645193456960	,	-3.905690619434600	,	-2.850028485534840	,	-1.680744709701730	,	-0.444454946189522	,	0.809553833468628	,	2.031288256481230	,
                    -6.224902042899910	,	-5.931190179426600	,	-5.401020480452490	,	-4.655529138828490	,	-3.724436541811090	,	-2.644862413010880	,	-1.459845966149890	,	-0.216630067428900	,	1.035222188464780	,	2.245803402536960	,
                    -6.195020716842420	,	-5.863153728558240	,	-5.297541303367960	,	-4.520732623770700	,	-3.563696600460490	,	-2.464587239584790	,	-1.267222562921640	,	-0.019337721626866	,	1.229318053605520	,	2.428964797378010	,
                    -6.170143296992150	,	-5.811432823588320	,	-5.221038862544690	,	-4.422498557992400	,	-3.447647191934090	,	-2.335349012013300	,	-1.129947836603470	,	0.120500793295233	,	1.366145436827380	,	2.557326172914430	,
                    -6.157939921949840	,	-5.787196904535160	,	-5.185736609092400	,	-4.377537359583530	,	-3.394819509666040	,	-2.276760918870530	,	-1.067935054974210	,	0.183466009499949	,	1.427552863135910	,	2.614727689021820	;


            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);
            std::shared_ptr<LSERK<double>> RK = std::make_shared<LSERK<double>>();
            RK->SetBB(s);

            MatrixX<double> RHS(9,10);
            for(int k = 0; k  < K; k++)
            {
                auto RHSList = de->CalculateRHS(s->Elements[k], s, 0);
                RHS.col(k) = RHSList[0];
            }

            BOOST_CHECK(RHS.isApprox(RHSExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_Advec_1)
        {
            int K = 10;
            int N = 8;
            MatrixX<double> uExpected(9,10);
            uExpected <<
                      -0.587785253156001	,	-0.415341817138984	,	-0.226340011876330	,	-0.028314745907123	,	0.170839339628254	,	0.363182599816391	,	0.541046915830627	,	0.697341398687613	,	0.825835080572327	,	0.921405323858956	,
                    -0.579646109797199	,	-0.406202432386625	,	-0.216564747690208	,	-0.018293309793834	,	0.180707424606649	,	0.372503924250016	,	0.549449867945620	,	0.704490979295556	,	0.831446258447796	,	0.925254399058397	,
                    -0.561367373662583	,	-0.385765275618069	,	-0.194783932656125	,	0.003962830972427	,	0.202551609013415	,	0.393065293602044	,	0.567908705323325	,	0.720111389103874	,	0.843605504244455	,	0.933467730081444	,
                    -0.535103516058117	,	-0.356603903092263	,	-0.163887618320078	,	0.035362348676081	,	0.233202530409787	,	0.421745663177752	,	0.593475127249108	,	0.741544610815442	,	0.860051050827653	,	0.944269969491628	,
                    -0.504081843342590	,	-0.322451829963020	,	-0.127966679278467	,	0.071620099032759	,	0.268351610014991	,	0.454384789131521	,	0.622303080600728	,	0.765412112037834	,	0.878006577965726	,	0.955597692339936	,
                    -0.472395591377775	,	-0.287874636772834	,	-0.091877029220610	,	0.107783425601767	,	0.303146895370995	,	0.486424855062480	,	0.650310590783629	,	0.788270495423506	,	0.894804542942161	,	0.965665557052866	,
                    -0.444485571124568	,	-0.257660245674420	,	-0.060562818924138	,	0.138949056256563	,	0.332921471036737	,	0.513621357358779	,	0.673844780990585	,	0.807204139644912	,	0.908382816531473	,	0.973347137090643	,
                    -0.424439464450597	,	-0.236092532523295	,	-0.038333336838164	,	0.160954088070280	,	0.353824781424782	,	0.532589597297851	,	0.690121746609626	,	0.820140919687718	,	0.917463662403857	,	0.978210024122796	,
                    -0.415341814069467	,	-0.226340012068104	,	-0.028314745904504	,	0.170839339622502	,	0.363182599814538	,	0.541046915839004	,	0.697341398687708	,	0.825835080573409	,	0.921405323859723	,	0.980242044554133	;

            std::shared_ptr<AdvecDE<double>> de = std::make_shared<AdvecDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, 0.0, 2.0, de);
            std::shared_ptr<LSERK<double>> RK = std::make_shared<LSERK<double>>();
            RK->SetBB(s);
            RK->Calculate(0.1);

            MatrixX<double> u(9,10);
            for(int k = 0; k  < K; k++)
            {
                u.col(k) = s->Elements[k]->u[0];
            }

            BOOST_CHECK(u.isApprox(uExpected));
        }
    BOOST_AUTO_TEST_SUITE_END()
BOOST_AUTO_TEST_SUITE_END()