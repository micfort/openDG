//////////////////////////////////////////////////////////////////////////
// This file is part of openPSTD.                                       //
//                                                                      //
// openPSTD is free software: you can redistribute it and/or modify     //
// it under the terms of the GNU General Public License as published by //
// the Free Software Foundation, either version 3 of the License, or    //
// (at your option) any later version.                                  //
//                                                                      //
// openPSTD is distributed in the hope that it will be useful,          //
// but WITHOUT ANY WARRANTY; without even the implied warranty of       //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        //
// GNU General Public License for more details.                         //
//                                                                      //
// You should have received a copy of the GNU General Public License    //
// along with openPSTD.  If not, see <http://www.gnu.org/licenses/>.    //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//
// Date: 15-6-2016
//
//
// Authors: M. R. Fortuin
//
//
// Purpose:
//
//
//////////////////////////////////////////////////////////////////////////

#ifdef STAND_ALONE
#   define BOOST_TEST_MODULE Main
#endif

#include "Macros.h"

#include <boost/test/unit_test.hpp>
#include <kernel/DG/DG.h>
#include <kernel/DG/RK.h>
#include <kernel/DG/LEE.h>

#include <iomanip>

using namespace OpenPSTD::Kernel;
using namespace OpenPSTD::Kernel::DG;
using namespace std;
using namespace Eigen;

BOOST_AUTO_TEST_SUITE(DG)
    BOOST_AUTO_TEST_SUITE(DG_LEE)

        BOOST_AUTO_TEST_CASE(DG_LEE_p_start)
        {
            int K = 58;
            int N = 4;
            MatrixX<double> pExpected(N+1,K);
            pExpected <<
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000009	,	0.000000000000211	,	0.000000000004196	,	0.000000000071093	,	0.000000001024741	,	0.000000012565289	,	0.000000131069417	,	0.000001163056115	,	0.000008779512319	,	0.000056378113316	,	0.000307979001018	,	0.001431205827213	,	0.005657877077737	,	0.019027220097393	,	0.054433667749669	,	0.132473886108031	,	0.274260571689522	,	0.483021986324738	,	0.723670458356205	,	0.922327613321088	,	1.000000000000000	,	0.922327613321087	,	0.723670458356207	,	0.483021986324738	,	0.274260571689522	,	0.132473886108031	,	0.054433667749669	,	0.019027220097393	,	0.005657877077737	,	0.001431205827213	,	0.000307979001018	,	0.000056378113316	,	0.000008779512319	,	0.000001163056115	,	0.000000131069417	,	0.000000012565289	,	0.000000001024741	,	0.000000000071093	,	0.000000000004196	,	0.000000000000211	,	0.000000000000009	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000001	,	0.000000000000016	,	0.000000000000357	,	0.000000000006919	,	0.000000000114008	,	0.000000001598068	,	0.000000019055790	,	0.000000193298762	,	0.000001668021372	,	0.000012244599110	,	0.000076464165467	,	0.000406201719294	,	0.001835675804636	,	0.007057008364691	,	0.023078931750230	,	0.064206825124425	,	0.151955740231385	,	0.305930972671621	,	0.523962501181356	,	0.763391619310985	,	0.946160887586890	,	0.997592135400629	,	0.894770102422755	,	0.682716397693998	,	0.443138645431393	,	0.244686123044255	,	0.114934252555233	,	0.045926149376506	,	0.015611369907454	,	0.004514320787309	,	0.001110488949720	,	0.000232384141843	,	0.000041368441216	,	0.000006264728404	,	0.000000807059884	,	0.000000088446305	,	0.000000008245634	,	0.000000000653941	,	0.000000000044119	,	0.000000000002532	,	0.000000000000124	,	0.000000000000005	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000002	,	0.000000000000044	,	0.000000000000959	,	0.000000000017624	,	0.000000000275422	,	0.000000003661609	,	0.000000041410991	,	0.000000398409528	,	0.000003260725411	,	0.000022702263630	,	0.000134460437281	,	0.000677470358381	,	0.002903731788591	,	0.010587492655991	,	0.032839774572585	,	0.086651809156732	,	0.194502650541229	,	0.371401655695462	,	0.603298949532648	,	0.833665299676626	,	0.979989229788574	,	0.979989229788573	,	0.833665299676626	,	0.603298949532648	,	0.371401655695462	,	0.194502650541230	,	0.086651809156732	,	0.032839774572584	,	0.010587492655991	,	0.002903731788591	,	0.000677470358381	,	0.000134460437281	,	0.000022702263630	,	0.000003260725411	,	0.000000398409528	,	0.000000041410991	,	0.000000003661609	,	0.000000000275422	,	0.000000000017624	,	0.000000000000959	,	0.000000000000044	,	0.000000000000002	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000005	,	0.000000000000124	,	0.000000000002532	,	0.000000000044119	,	0.000000000653941	,	0.000000008245634	,	0.000000088446305	,	0.000000807059884	,	0.000006264728404	,	0.000041368441216	,	0.000232384141843	,	0.001110488949720	,	0.004514320787309	,	0.015611369907454	,	0.045926149376506	,	0.114934252555233	,	0.244686123044255	,	0.443138645431393	,	0.682716397693996	,	0.894770102422756	,	0.997592135400629	,	0.946160887586890	,	0.763391619310985	,	0.523962501181356	,	0.305930972671621	,	0.151955740231385	,	0.064206825124425	,	0.023078931750230	,	0.007057008364691	,	0.001835675804636	,	0.000406201719294	,	0.000076464165467	,	0.000012244599110	,	0.000001668021372	,	0.000000193298762	,	0.000000019055790	,	0.000000001598068	,	0.000000000114008	,	0.000000000006919	,	0.000000000000357	,	0.000000000000016	,	0.000000000000001	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000009	,	0.000000000000211	,	0.000000000004196	,	0.000000000071093	,	0.000000001024741	,	0.000000012565289	,	0.000000131069417	,	0.000001163056115	,	0.000008779512319	,	0.000056378113316	,	0.000307979001018	,	0.001431205827213	,	0.005657877077737	,	0.019027220097393	,	0.054433667749669	,	0.132473886108031	,	0.274260571689522	,	0.483021986324738	,	0.723670458356205	,	0.922327613321088	,	1.000000000000000	,	0.922327613321087	,	0.723670458356207	,	0.483021986324738	,	0.274260571689522	,	0.132473886108031	,	0.054433667749669	,	0.019027220097393	,	0.005657877077737	,	0.001431205827213	,	0.000307979001018	,	0.000056378113316	,	0.000008779512319	,	0.000001163056115	,	0.000000131069417	,	0.000000012565289	,	0.000000001024741	,	0.000000000071093	,	0.000000000004196	,	0.000000000000211	,	0.000000000000009	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	;


            std::shared_ptr<LinearizedEulerEquationsDE<double>> de = std::make_shared<LinearizedEulerEquationsDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -2.0, 0.0, de);

            MatrixX<double> p(N+1,K);
            for(int k = 0; k  < K; k++)
            {
                p.col(k) = s->Elements[k]->u[0];
            }

            BOOST_CHECK(p.isApprox(pExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_LEE_u_start)
        {
            int K = 58;
            int N = 4;
            MatrixX<double> uExpected(N+1,K);
            uExpected <<
                      0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	-0.000000000000001	,	-0.000000000000010	,	-0.000000000000171	,	-0.000000000002469	,	-0.000000000030276	,	-0.000000000315807	,	-0.000000002802342	,	-0.000000021153922	,	-0.000000135841056	,	-0.000000742064432	,	-0.000003448439455	,	-0.000013632453263	,	-0.000045845409000	,	-0.000131155983302	,	-0.000319191109337	,	-0.000660821077246	,	-0.001163824268908	,	-0.001743658189423	,	-0.002222315527362	,	-0.002409464376069	,	-0.002222315527362	,	-0.001743658189423	,	-0.001163824268908	,	-0.000660821077246	,	-0.000319191109337	,	-0.000131155983302	,	-0.000045845409000	,	-0.000013632453263	,	-0.000003448439455	,	-0.000000742064432	,	-0.000000135841056	,	-0.000000021153922	,	-0.000000002802342	,	-0.000000000315807	,	-0.000000000030276	,	-0.000000000002469	,	-0.000000000000171	,	-0.000000000000010	,	-0.000000000000001	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	-0.000000000000001	,	-0.000000000000017	,	-0.000000000000275	,	-0.000000000003850	,	-0.000000000045914	,	-0.000000000465746	,	-0.000000004019038	,	-0.000000029502925	,	-0.000000184237683	,	-0.000000978728572	,	-0.000004422995457	,	-0.000017003610256	,	-0.000055607863890	,	-0.000154704057838	,	-0.000366131942827	,	-0.000737129780188	,	-0.001262468980993	,	-0.001839364911720	,	-0.002279740952671	,	-0.002403662712095	,	-0.002155916686559	,	-0.001644980839202	,	-0.001067726779827	,	-0.000589562496794	,	-0.000276929987122	,	-0.000110657420853	,	-0.000037615039654	,	-0.000010877095119	,	-0.000002675683564	,	-0.000000559921311	,	-0.000000099675785	,	-0.000000015094640	,	-0.000000001944582	,	-0.000000000213108	,	-0.000000000019868	,	-0.000000000001576	,	-0.000000000000106	,	-0.000000000000006	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	-0.000000000000002	,	-0.000000000000042	,	-0.000000000000664	,	-0.000000000008823	,	-0.000000000099778	,	-0.000000000959954	,	-0.000000007856602	,	-0.000000054700295	,	-0.000000323977634	,	-0.000001632340694	,	-0.000006996438302	,	-0.000025510186387	,	-0.000079126266951	,	-0.000208784447285	,	-0.000468647207530	,	-0.000894879058611	,	-0.001453627327019	,	-0.002008686841136	,	-0.002361249138107	,	-0.002361249138107	,	-0.002008686841136	,	-0.001453627327019	,	-0.000894879058611	,	-0.000468647207530	,	-0.000208784447285	,	-0.000079126266951	,	-0.000025510186387	,	-0.000006996438302	,	-0.000001632340694	,	-0.000000323977634	,	-0.000000054700295	,	-0.000000007856602	,	-0.000000000959954	,	-0.000000000099778	,	-0.000000000008823	,	-0.000000000000664	,	-0.000000000000042	,	-0.000000000000002	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	-0.000000000000006	,	-0.000000000000106	,	-0.000000000001576	,	-0.000000000019868	,	-0.000000000213108	,	-0.000000001944582	,	-0.000000015094640	,	-0.000000099675785	,	-0.000000559921311	,	-0.000002675683564	,	-0.000010877095119	,	-0.000037615039654	,	-0.000110657420853	,	-0.000276929987122	,	-0.000589562496794	,	-0.001067726779827	,	-0.001644980839202	,	-0.002155916686559	,	-0.002403662712095	,	-0.002279740952671	,	-0.001839364911720	,	-0.001262468980993	,	-0.000737129780188	,	-0.000366131942827	,	-0.000154704057838	,	-0.000055607863890	,	-0.000017003610256	,	-0.000004422995457	,	-0.000000978728572	,	-0.000000184237683	,	-0.000000029502925	,	-0.000000004019038	,	-0.000000000465746	,	-0.000000000045914	,	-0.000000000003850	,	-0.000000000000275	,	-0.000000000000017	,	-0.000000000000001	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	-0.000000000000001	,	-0.000000000000010	,	-0.000000000000171	,	-0.000000000002469	,	-0.000000000030276	,	-0.000000000315807	,	-0.000000002802342	,	-0.000000021153922	,	-0.000000135841056	,	-0.000000742064432	,	-0.000003448439455	,	-0.000013632453263	,	-0.000045845409000	,	-0.000131155983302	,	-0.000319191109337	,	-0.000660821077246	,	-0.001163824268908	,	-0.001743658189423	,	-0.002222315527362	,	-0.002409464376069	,	-0.002222315527362	,	-0.001743658189423	,	-0.001163824268908	,	-0.000660821077246	,	-0.000319191109337	,	-0.000131155983302	,	-0.000045845409000	,	-0.000013632453263	,	-0.000003448439455	,	-0.000000742064432	,	-0.000000135841056	,	-0.000000021153922	,	-0.000000002802342	,	-0.000000000315807	,	-0.000000000030276	,	-0.000000000002469	,	-0.000000000000171	,	-0.000000000000010	,	-0.000000000000001	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	;

            std::shared_ptr<LinearizedEulerEquationsDE<double>> de = std::make_shared<LinearizedEulerEquationsDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -2.0, 0.0, de);

            MatrixX<double> u(N+1,K);
            for(int k = 0; k  < K; k++)
            {
                u.col(k) = s->Elements[k]->u[1];
            }

            BOOST_CHECK(u.isApprox(uExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_LEE_step_1_RHS_p)
        {
            int K = 58;
            int N = 4;
            MatrixX<double> pExpected(N+1,K);
            pExpected <<
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000008	,	0.000000000000230	,	0.000000000005468	,	0.000000000108253	,	0.000000001793726	,	0.000000024955217	,	0.000000292120303	,	0.000002880849266	,	0.000023952010538	,	0.000167924663659	,	0.000992489447442	,	0.004941453216555	,	0.020698297709200	,	0.072791748207361	,	0.214270394658075	,	0.525459558162235	,	1.065592098794420	,	1.764664546061650	,	2.330657526041000	,	2.327728453521100	,	1.483384290545760	,	0.000149530888562	,	-1.483233425594880	,	-2.327842573527990	,	-2.330868043716270	,	-1.764768798208960	,	-1.065562971118880	,	-0.525389709932392	,	-0.214229588283356	,	-0.072785166697400	,	-0.020705153835460	,	-0.004947919660023	,	-0.000995631463942	,	-0.000168989988423	,	-0.000024226029613	,	-0.000002936345743	,	-0.000000301153820	,	-0.000000026152316	,	-0.000000001924001	,	-0.000000000119968	,	-0.000000000006342	,	-0.000000000000284	,	-0.000000000000011	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000001	,	0.000000000000021	,	0.000000000000528	,	0.000000000011263	,	0.000000000204449	,	0.000000003154243	,	0.000000041327012	,	0.000000459468374	,	0.000004331033721	,	0.000034580975637	,	0.000233632019750	,	0.001333931244934	,	0.006426490003191	,	0.026073736347261	,	0.088857086580745	,	0.253437433196958	,	0.601787353981477	,	1.179851683741800	,	1.883402004343930	,	2.382980013317930	,	2.243990787270680	,	1.259211565043420	,	-0.277148652556430	,	-1.687934144778450	,	-2.386057745986820	,	-2.261473722269740	,	-1.642232149794250	,	-0.956243382219780	,	-0.455979041396869	,	-0.180119998660532	,	-0.059354242446192	,	-0.016390574844517	,	-0.003804996964658	,	-0.000744241628391	,	-0.000122857978262	,	-0.000017138814722	,	-0.000002022473448	,	-0.000000202049424	,	-0.000000017099654	,	-0.000000001226603	,	-0.000000000074611	,	-0.000000000003850	,	-0.000000000000169	,	-0.000000000000006	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000002	,	0.000000000000056	,	0.000000000001366	,	0.000000000028100	,	0.000000000490075	,	0.000000007242394	,	0.000000090663493	,	0.000000961024327	,	0.000008621037809	,	0.000065405835051	,	0.000419305894273	,	0.002268908768094	,	0.010347454097239	,	0.039693182291796	,	0.127721948402092	,	0.343366876048156	,	0.766643445695632	,	1.407938017967750	,	2.090941539620210	,	2.425970502053210	,	2.011323610874500	,	0.788102155528390	,	-0.788102155528390	,	-2.011323610874480	,	-2.425970502053200	,	-2.090941539620200	,	-1.407938017967780	,	-0.766643445695653	,	-0.343366876048156	,	-0.127721948402093	,	-0.039693182291795	,	-0.010347454097239	,	-0.002268908768094	,	-0.000419305894273	,	-0.000065405835051	,	-0.000008621037809	,	-0.000000961024327	,	-0.000000090663493	,	-0.000000007242394	,	-0.000000000490075	,	-0.000000000028100	,	-0.000000000001366	,	-0.000000000000056	,	-0.000000000000002	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000006	,	0.000000000000169	,	0.000000000003850	,	0.000000000074611	,	0.000000001226603	,	0.000000017099654	,	0.000000202049424	,	0.000002022473448	,	0.000017138814722	,	0.000122857978262	,	0.000744241628391	,	0.003804996964658	,	0.016390574844517	,	0.059354242446191	,	0.180119998660530	,	0.455979041396865	,	0.956243382219759	,	1.642232149794230	,	2.261473722269760	,	2.386057745986840	,	1.687934144778440	,	0.277148652556434	,	-1.259211565043440	,	-2.243990787270700	,	-2.382980013317910	,	-1.883402004343940	,	-1.179851683741840	,	-0.601787353981479	,	-0.253437433196954	,	-0.088857086580745	,	-0.026073736347260	,	-0.006426490003191	,	-0.001333931244934	,	-0.000233632019750	,	-0.000034580975637	,	-0.000004331033721	,	-0.000000459468374	,	-0.000000041327012	,	-0.000000003154243	,	-0.000000000204449	,	-0.000000000011263	,	-0.000000000000528	,	-0.000000000000021	,	-0.000000000000001	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000011	,	0.000000000000284	,	0.000000000006342	,	0.000000000119968	,	0.000000001924001	,	0.000000026152316	,	0.000000301153820	,	0.000002936345743	,	0.000024226029613	,	0.000168989988423	,	0.000995631463942	,	0.004947919660023	,	0.020705153835461	,	0.072785166697400	,	0.214229588283369	,	0.525389709932384	,	1.065562971118890	,	1.764768798209030	,	2.330868043716290	,	2.327842573528050	,	1.483233425594930	,	-0.000149530888537	,	-1.483384290545920	,	-2.327728453521190	,	-2.330657526041050	,	-1.764664546061640	,	-1.065592098794400	,	-0.525459558162258	,	-0.214270394658077	,	-0.072791748207362	,	-0.020698297709200	,	-0.004941453216555	,	-0.000992489447442	,	-0.000167924663659	,	-0.000023952010538	,	-0.000002880849266	,	-0.000000292120303	,	-0.000000024955217	,	-0.000000001793726	,	-0.000000000108253	,	-0.000000000005468	,	-0.000000000000230	,	-0.000000000000008	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	;

            pExpected = pExpected*1000;

            std::shared_ptr<LinearizedEulerEquationsDE<double>> de = std::make_shared<LinearizedEulerEquationsDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -2.0, 0.0, de);

            MatrixX<double> p(N+1,K);
            for(int k = 0; k  < K; k++)
            {
                auto RHSList = de->CalculateRHS(s->Elements[k], s, 0);
                p.col(k) = RHSList[0];
            }

            BOOST_CHECK(p.isApprox(pExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_LEE_step_1_RHS_u)
        {
            int K = 58;
            int N = 4;
            MatrixX<double> uExpected(N+1,K);
            uExpected <<
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	-0.000000000000001	,	-0.000000000000019	,	-0.000000000000554	,	-0.000000000013174	,	-0.000000000260832	,	-0.000000004321920	,	-0.000000060128706	,	-0.000000703853463	,	-0.000006941303679	,	-0.000057711516127	,	-0.000404608494949	,	-0.002391367967236	,	-0.011906255491302	,	-0.049871810975591	,	-0.175389124177435	,	-0.516276882774919	,	-1.266076086456960	,	-2.567506201465960	,	-4.251896359447870	,	-5.615636281813370	,	-5.608578785921770	,	-3.574161604090690	,	-0.000360289349129	,	3.573798100365950	,	5.608853754012940	,	5.616143516652460	,	4.252147551282950	,	2.567436019369410	,	1.265907789635420	,	0.516178561268719	,	0.175373266263643	,	0.049888330567574	,	0.011921836156477	,	0.002398938544061	,	0.000407175357017	,	0.000058371755326	,	0.000007075020462	,	0.000000725619400	,	0.000000063013073	,	0.000000004635813	,	0.000000000289060	,	0.000000000015282	,	0.000000000000685	,	0.000000000000026	,	0.000000000000001	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	-0.000000000000002	,	-0.000000000000051	,	-0.000000000001271	,	-0.000000000027137	,	-0.000000000492613	,	-0.000000007600036	,	-0.000000099575964	,	-0.000001107072679	,	-0.000010435471463	,	-0.000083321628887	,	-0.000562928028696	,	-0.003214059814795	,	-0.015484398725854	,	-0.062823738879745	,	-0.214097984677602	,	-0.610648466850488	,	-1.449985191387310	,	-2.842810601021140	,	-4.537990035284040	,	-5.741705450974480	,	-5.406815862156190	,	-3.034025407906470	,	0.667779805210308	,	4.067017190994510	,	5.749121138199220	,	5.448940371225550	,	3.956899862164800	,	2.304034364310480	,	1.098665256479930	,	0.433992720190184	,	0.143011932742675	,	0.039492506191160	,	0.009168004637395	,	0.001793223690796	,	0.000296021921938	,	0.000041295363521	,	0.000004873077726	,	0.000000486830890	,	0.000000041201006	,	0.000000002955455	,	0.000000000179772	,	0.000000000009276	,	0.000000000000406	,	0.000000000000015	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	-0.000000000000005	,	-0.000000000000136	,	-0.000000000003290	,	-0.000000000067707	,	-0.000000001180818	,	-0.000000017450290	,	-0.000000218450457	,	-0.000002315553881	,	-0.000020772083484	,	-0.000157593029543	,	-0.001010302614927	,	-0.005466854849274	,	-0.024931822030308	,	-0.095639308704902	,	-0.307741484716989	,	-0.827330255760200	,	-1.847200071550560	,	-3.392376498006760	,	-5.038049152158200	,	-5.845289502091920	,	-4.846212589149000	,	-1.898904068449000	,	1.898904068449020	,	4.846212589148940	,	5.845289502091890	,	5.038049152158170	,	3.392376498006840	,	1.847200071550610	,	0.827330255760201	,	0.307741484716991	,	0.095639308704901	,	0.024931822030308	,	0.005466854849274	,	0.001010302614927	,	0.000157593029543	,	0.000020772083484	,	0.000002315553881	,	0.000000218450457	,	0.000000017450290	,	0.000000001180818	,	0.000000000067707	,	0.000000000003290	,	0.000000000000136	,	0.000000000000005	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	-0.000000000000015	,	-0.000000000000406	,	-0.000000000009276	,	-0.000000000179772	,	-0.000000002955455	,	-0.000000041201006	,	-0.000000486830890	,	-0.000004873077726	,	-0.000041295363521	,	-0.000296021921938	,	-0.001793223690796	,	-0.009168004637395	,	-0.039492506191160	,	-0.143011932742672	,	-0.433992720190180	,	-1.098665256479920	,	-2.304034364310430	,	-3.956899862164730	,	-5.448940371225600	,	-5.749121138199270	,	-4.067017190994460	,	-0.667779805210314	,	3.034025407906520	,	5.406815862156240	,	5.741705450974430	,	4.537990035284060	,	2.842810601021220	,	1.449985191387310	,	0.610648466850478	,	0.214097984677602	,	0.062823738879743	,	0.015484398725853	,	0.003214059814795	,	0.000562928028696	,	0.000083321628887	,	0.000010435471463	,	0.000001107072679	,	0.000000099575964	,	0.000000007600036	,	0.000000000492613	,	0.000000000027137	,	0.000000000001271	,	0.000000000000051	,	0.000000000000002	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,
                    0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	-0.000000000000001	,	-0.000000000000026	,	-0.000000000000685	,	-0.000000000015282	,	-0.000000000289060	,	-0.000000004635813	,	-0.000000063013073	,	-0.000000725619400	,	-0.000007075020462	,	-0.000058371755326	,	-0.000407175357017	,	-0.002398938544061	,	-0.011921836156478	,	-0.049888330567575	,	-0.175373266263644	,	-0.516178561268750	,	-1.265907789635410	,	-2.567436019369420	,	-4.252147551283140	,	-5.616143516652480	,	-5.608853754013090	,	-3.573798100366060	,	0.000360289349124	,	3.574161604091080	,	5.608578785921970	,	5.615636281813490	,	4.251896359447830	,	2.567506201465930	,	1.266076086457020	,	0.516276882774925	,	0.175389124177438	,	0.049871810975592	,	0.011906255491302	,	0.002391367967236	,	0.000404608494949	,	0.000057711516127	,	0.000006941303679	,	0.000000703853463	,	0.000000060128706	,	0.000000004321920	,	0.000000000260832	,	0.000000000013174	,	0.000000000000554	,	0.000000000000019	,	0.000000000000001	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	,	0.000000000000000	;

            std::shared_ptr<LinearizedEulerEquationsDE<double>> de = std::make_shared<LinearizedEulerEquationsDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -2.0, 0.0, de);

            MatrixX<double> u(N+1,K);
            for(int k = 0; k  < K; k++)
            {
                auto RHSList = de->CalculateRHS(s->Elements[k], s, 0);
                u.col(k) = RHSList[1];
            }

            BOOST_CHECK(u.isApprox(uExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_LEE_p_timestep)
        {
            int K = 58;
            int N = 4;
            MatrixX<double> pExpected(N+1,K);
            pExpected <<
                1.2882975570297207e-24,3.0785900127289371e-22,8.7580865047345598e-21,1.4921478443591621e-19,1.318407629559912e-18,-6.0129203106217661e-18,-4.1127247237956522e-16,-7.3213699347091305e-15,-7.9213821779223421e-14,-5.420096968806426e-13,-1.5843201913323051e-12,1.4194306746385112e-11,2.8055171488128259e-10,3.0798514521716758e-09,2.9223369262730587e-08,2.5917892844701359e-07,2.0973247366757038e-06,1.4919057378588697e-05,9.1323165250309956e-05,0.00047701786648602783,0.00212075902838601,0.0080206107534927362,0.025802720491267465,0.07061255432903811,0.16438676393558666,0.3255540407261826,0.54846693314316108,0.78604654106146343,0.95833251919481488,0.99392683939464577,0.87692628295191621,0.65817663471483789,0.42023539210180294,0.2282513989392011,0.1054640698390787,0.041453877477491914,0.013860991990462512,0.0039426714939070984,0.00095400844939472402,0.00019637084405298245,3.4384469187393718e-05,5.1215933248276598e-06,6.489358186561823e-07,6.9943640577235456e-08,6.4126861008339686e-09,5.0011731019401194e-10,3.3177090242871197e-11,1.8721169742800356e-12,8.9856425133520188e-14,3.6684224312991286e-15,1.2738419281264948e-16,3.7622618706084124e-18,9.4508394094535162e-20,2.0191542726690335e-21,3.6688966462149777e-23,5.6696496858380649e-25,7.450606115241724e-27,8.2866116201033746e-29,
                -4.7567234882870078e-25,-1.2158225337186201e-22,-4.0195672575814128e-21,-7.8476633366949462e-20,-9.2711373319373624e-19,-3.2809119177026472e-18,1.1586289705459749e-16,2.91082678183256e-15,3.9088137040610498e-14,3.6935336582497183e-13,2.8146994612562655e-12,2.2272536527381389e-11,2.3912685707432318e-10,3.0238606716162772e-09,3.5260942400967069e-08,3.4936192609234951e-07,2.913944838682343e-06,2.054363427403024e-05,0.00012286825650028457,0.0006245346395796689,0.0026998160324998178,0.0099281342977526922,0.031058282018975022,0.082653953341080125,0.18712130667939925,0.36037457649031557,0.59041222765621681,0.82286108457565177,0.97559084420818731,0.98396375415063153,0.84423024880979702,0.61618816104806606,0.38259258735082891,0.20208333332444595,0.090801905266048505,0.034707988600434142,0.011285819861052735,0.0031217974582138952,0.00073458585166383782,0.00014704300658327263,2.5038442524345089e-05,3.6268353253719058e-06,4.4689106391440901e-07,4.684073492112682e-08,4.1762636188648367e-09,3.16728585573791e-10,2.0432130303669767e-11,1.1211345740693115e-12,5.2324960039494607e-14,2.0770886555358656e-15,7.0126544812456996e-17,2.0136114925931092e-18,4.9171942444895607e-20,1.0211462608578294e-21,1.8032897384703612e-23,2.7078555272370048e-25,3.4573218972060875e-27,3.7398002143793585e-29,
                5.5864500724674742e-25,1.0883673642870991e-22,3.5006070069916012e-21,6.6973294262602309e-20,7.6534618497664781e-19,2.1499991623225555e-18,-1.0599871738688661e-16,-2.4276980587215021e-15,-2.8655253025985517e-14,-1.7894696597316054e-13,5.1646706643409668e-13,3.2687005671942828e-11,5.7399129019923768e-10,7.4170869307411442e-09,7.9503846361708234e-08,7.2560640982672072e-07,5.6565890882183443e-06,3.7610891165023341e-05,0.00021298671861303656,0.0010264541280366583,0.0042086291409089566,0.014679589766519549,0.043556330991103065,0.10993959926326417,0.23606145189649425,0.43118719137248745,0.67000399946113998,0.88564568365737617,0.99589516548891677,0.95266001830991665,0.77523353587285437,0.53665734100249407,0.31603216063576078,0.15831981822905036,0.067469852088006377,0.024459986788662402,0.0075435771360982517,0.0019791437346628128,0.00044173566344743063,8.3876738211549162e-05,1.3549603400147753e-05,1.8622313731920598e-06,2.1776275636235922e-07,2.1667225453199175e-08,1.8345377673906089e-09,1.3218922472161327e-10,8.1070689565460048e-12,4.2324723124373138e-13,1.8813272724720242e-14,7.1214341143195604e-16,2.2962210705293927e-17,6.3085923027926017e-19,1.4773175960954295e-20,2.9499172822301522e-22,5.0249804215354617e-24,7.3057126273795435e-26,9.0703629652632138e-28,9.6955962754770235e-30,
                -2.2359336453486494e-24,-1.5114397636978305e-22,-4.1657877180687254e-21,-7.0018129408445914e-20,-5.9616852893292549e-19,3.9175369581736887e-18,2.2970283748100216e-16,4.3879300155690183e-15,5.7741036798300306e-14,6.4554014057392965e-13,7.4745792586341805e-12,9.7803467280372616e-11,1.3042804385941382e-09,1.5727793358369698e-08,1.629318372352546e-07,1.4319560353352153e-06,1.0669036851991604e-05,6.748402297184393e-05,0.00036277987512639001,0.0016584710293360901,0.0064491547065705611,0.021333607743135592,0.060034489125550011,0.14371828817022833,0.2926820011614889,0.5070504465600657,0.74726826998316165,0.93685353158762419,0.99916357922823185,0.90650768751905975,0.69964359845321655,0.45936011637690555,0.25656724280993137,0.12190475455556216,0.049273191155019727,0.016942162248019105,0.0049555292120904842,0.0012330067741342403,0.0002609641126162949,4.6980108491825598e-05,7.1933726859231223e-06,9.3667619484093029e-07,1.0370950241999901e-07,9.7617528769592834e-09,7.8089223052879329e-10,5.3068497897690492e-11,3.0621928507648774e-12,1.4992160509339135e-13,6.2216580257531016e-15,2.1856326795635865e-16,6.4874495529816883e-18,1.6227959146983038e-19,3.4080285272387468e-21,5.9745703639075777e-23,8.6634309932144395e-25,1.0225814521236523e-26,9.5201089866925984e-29,-9.371242123324533e-31,
                -1.2770623673632268e-23,1.1231585954139297e-21,4.5959642987624054e-20,1.0209722388015986e-18,1.4615364411598607e-17,1.1753108534077865e-16,-1.7821873070820024e-16,-2.0908437305065907e-14,-3.3900320234108103e-13,-3.2154900073852899e-12,-1.7357265297404198e-11,1.5323371603292715e-11,1.6343726312920951e-09,2.3851618582243127e-08,2.464711840581996e-07,2.0854520635760697e-06,1.4955017597917964e-05,9.1489346488220078e-05,0.00047729311699516643,0.002120780767682743,0.0080197898359710054,0.025801135563452496,0.070611787093744521,0.1643887825734853,0.325558288980759,0.5484694653094111,0.78604392552828561,0.95832648040683788,0.99392299841703324,0.87692784788367062,0.65818119246568441,0.42023849583248196,0.22825139691735477,0.10546246677425719,0.041452574852703844,0.013860576042544301,0.0039427786264520205,0.00095420727914518905,0.00019649398935494091,3.4434747560908185e-05,5.1368880997442608e-06,6.5257182496875261e-07,7.0635906560457337e-08,6.5197992527777034e-09,5.1371613752961376e-10,3.4603237749269488e-11,1.9962734906170843e-12,9.8862613740982132e-14,4.2143666276347809e-15,1.5510497371466947e-16,4.943502371711239e-18,1.3681706848804945e-19,3.2945660603346214e-21,6.9084539000474326e-23,1.2609494836856323e-24,2.0000128142275847e-26,2.7550584020394771e-28,2.6941496667550746e-30;


            std::shared_ptr<LinearizedEulerEquationsDE<double>> de = std::make_shared<LinearizedEulerEquationsDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -2.0, 0.0, de);
            std::shared_ptr<RKF84<double>> RK = std::make_shared<RKF84<double>>();
            RK->SetBB(s);

            double dt = de->GetMaxDt(0, N);
            double Nsteps = ceil(0.1/dt);
            dt = 0.1/Nsteps;

            RK->ComputeTimeStep(dt);

            auto State = s->GetState();
            MatrixX<double> p = State[0];

            BOOST_CHECK(p.isApprox(pExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_LEE_u_timestep)
        {
            int K = 58;
            int N = 4;
            MatrixX<double> uExpected(N+1,K);
            uExpected <<
                -1.6254044823828076e-26,-7.4250152870923765e-25,-2.1102323934843747e-23,-3.5952770821339034e-22,-3.1766562165828746e-21,1.4487917284587452e-20,9.9094637105646618e-19,1.7640580041705731e-17,1.9086288166933332e-16,1.3059530561179736e-15,3.8173630613023222e-15,-3.4200676448413732e-14,-6.7597936265157454e-13,-7.4207923575926412e-12,-7.0412667187264657e-11,-6.2448239512086734e-10,-5.0534292380688587e-09,-3.5946937278241754e-08,-2.2003991338050346e-07,-1.1493575560466145e-06,-5.1098933291232185e-06,-1.9325375884858425e-05,-6.217073582937933e-05,-0.00017013843415906771,-0.00039608405160009464,-0.00078441086361511793,-0.0013215115368603787,-0.0018939511386200285,-0.0023090680654285966,-0.0023948313119404653,-0.0021129226392113819,-0.0015858531545064431,-0.0010125422068327978,-0.00054996361453196665,-0.0002541119192325513,-9.9881641031941397e-05,-3.3397566418000345e-05,-9.4997265111124343e-06,-2.2986493732855519e-06,-4.7314855324429141e-07,-8.2848153597112198e-08,-1.2340296664871746e-08,-1.5635877374122931e-09,-1.6852671030296246e-10,-1.5451138714748043e-11,-1.2050148427984241e-12,-7.9939017039039317e-14,-4.5107991575134647e-15,-2.1650585531335892e-16,-8.8389331652213107e-18,-3.0692767458698566e-19,-9.0650359524128089e-21,-2.2771460902630384e-22,-4.8650802724142101e-24,-8.8400758099881226e-26,-1.3660819006702266e-27,-1.7951969519501705e-29,-1.9966296220793509e-31,
                1.5679784076300881e-27,2.9298782523562687e-25,9.685005814025932e-24,1.8908665250245224e-22,2.2338475126968204e-21,7.9052403867252279e-21,-2.7916752296122559e-19,-7.0135334357337056e-18,-9.4181473726261945e-17,-8.8994377713652458e-16,-6.7819180812381368e-15,-5.3664883327425409e-14,-5.7616764348197269e-13,-7.2858845664561014e-12,-8.4959984581758219e-11,-8.4177511527443714e-10,-7.0210462826358051e-09,-4.9499154938270097e-08,-2.9604668698716841e-07,-1.5047939656884307e-06,-6.5051105522487955e-06,-2.3921485911265872e-05,-7.4833824106630952e-05,-0.0001991517561166187,-0.00045086212244753172,-0.00086830970409444057,-0.0014225772297333118,-0.0019826544697386954,-0.0023506513847388949,-0.0023708256129692544,-0.0020341427097072488,-0.0014846834230009211,-0.00092184320976996246,-0.0004869125926425701,-0.00021878395601775027,-8.3627662097763677e-05,-2.7192780909940831e-05,-7.5218597648698055e-06,-1.7699584407484858e-06,-3.5429488611251014e-07,-6.0329235294659723e-08,-8.7387305143551784e-09,-1.0767680984847561e-09,-1.1286108214138679e-10,-1.0062558414748649e-11,-7.6314624381912692e-13,-4.9230490094201625e-14,-2.7013338169837317e-15,-1.2607512719516059e-16,-5.0046711213699075e-18,-1.6896741154982164e-19,-4.8517251585586669e-21,-1.1847804359668543e-22,-2.4604155400381839e-24,-4.3449623811742463e-26,-6.5244814204454083e-28,-8.3302939951860904e-30,-9.0109153357789983e-32,
                -1.9946330195885904e-27,-2.622818078338028e-25,-8.4345895869755312e-24,-1.6136976672284765e-22,-1.8440743680633699e-21,-5.1803463901946821e-21,2.5540013345273025e-19,5.8494519883418113e-18,6.904381135336124e-17,4.3116633971799749e-16,-1.2444089979859232e-15,-7.8758175726918175e-14,-1.3830115659090612e-12,-1.7871206733829229e-11,-1.9156168556901477e-10,-1.7483227955249515e-09,-1.3629349898123865e-08,-9.0622102414339535e-08,-5.1318391107398652e-07,-2.4732046551735007e-06,-1.0140541987106851e-05,-3.5369948597738865e-05,-0.00010494742787534168,-0.00026489554794415838,-0.00056878165890777619,-0.0010389301770293412,-0.001614350768525505,-0.0021339317245919016,-0.0023995739235450906,-0.0022954003766231783,-0.0018678975878198027,-0.0012930567453015205,-0.00076146823274404708,-0.0003814659620486482,-0.00016256620506471215,-5.8935466806404048e-05,-1.8175980377558857e-05,-4.7686763237905684e-06,-1.0643463447158685e-06,-2.0209801270160639e-07,-3.2647286702526386e-08,-4.4869801537030843e-09,-5.2469160389024269e-10,-5.2206407857713788e-11,-4.4202533970669381e-12,-3.1850522786978055e-13,-1.9533693844891033e-14,-1.0197991259644776e-15,-4.5329910426888115e-17,-1.7158841805591805e-18,-5.5326628684283613e-20,-1.5200328417701153e-21,-3.5595441219555259e-23,-7.1077205895799559e-25,-1.2107511346385438e-26,-1.7602854378009526e-28,-2.1854716047416728e-30,-2.3361194332200943e-32,
                6.1798202921540744e-27,3.642275444036213e-25,1.003731910353412e-23,1.6870618854587333e-22,1.4364468325993219e-21,-9.4391657426541449e-21,-5.5346080399248782e-19,-1.0572561057198318e-17,-1.3912497120280533e-16,-1.5554059720355866e-15,-1.8009732449784783e-14,-2.3565397026810738e-13,-3.1426172531964882e-12,-3.789555781116955e-11,-3.9257845754585125e-10,-3.4502470552374897e-09,-2.5706664221843248e-08,-1.626003493044935e-07,-8.7410518547186923e-07,-3.9960268639281271e-06,-1.5539008521240776e-05,-5.1402567870119235e-05,-0.00014465096288352648,-0.00034628409553581286,-0.00070520685531525135,-0.0012217199878564579,-0.0018005162758912871,-0.0022573152099549985,-0.0024074490500162141,-0.0021841979797100424,-0.0016857663264178962,-0.0011068118361971661,-0.00061818963161682351,-0.00029372516337508586,-0.00011872199878326548,-4.082153639018793e-05,-1.1940171101102295e-05,-2.970885897728493e-06,-6.287837327814837e-07,-1.1319689779492263e-07,-1.7332175230516644e-08,-2.256887923382932e-09,-2.4988435154030135e-10,-2.3520595805062214e-11,-1.8815320110233739e-12,-1.2786665517286128e-13,-7.3782445868424167e-15,-3.6123076666134719e-16,-1.4990863373796804e-17,-5.2662040799096273e-19,-1.5631278596107884e-20,-3.910068944890485e-22,-8.2115233067166059e-24,-1.4395514615362448e-25,-2.0874228004491937e-27,-2.4638735138105165e-29,-2.2938367937587131e-31,2.2579679901176189e-33,
                2.957147411508704e-26,-2.706308161320247e-24,-1.1073812656931445e-22,-2.459996238466753e-21,-3.5215199893021542e-20,-2.8318696320935466e-19,4.2941168278967728e-19,5.0378134845832588e-17,8.1681613941421332e-16,7.7476086244013437e-15,4.1821712400077573e-14,-3.6921117999404122e-14,-3.9379626323207881e-12,-5.7469625285504994e-11,-5.9386353771582646e-10,-5.0248224551865415e-09,-3.6033582145671346e-08,-2.2044032115321781e-07,-1.1500207623428825e-06,-5.1099457091842607e-06,-1.9323397913333971e-05,-6.2166917002271183e-05,-0.00017013658553296013,-0.00039608891543619718,-0.0007844210996331819,-0.0013215176380247462,-0.0018939448365859939,-0.0023090535151840562,-0.002394822057241743,-0.0021129264098587604,-0.0015858641362448155,-0.0010125496851612268,-0.00054996360966040267,-0.00025410805670495178,-9.9878502403945128e-05,-3.3396564206304903e-05,-9.4999846431632961e-06,-2.2991284464861641e-06,-4.7344526746241782e-07,-8.296929754691877e-08,-1.2377148880205009e-08,-1.5723485650820435e-09,-1.7019470053044723e-10,-1.5709224038663008e-11,-1.2377807327354312e-12,-8.3375268662693143e-14,-4.8099498597969188e-15,-2.3820594597188208e-16,-1.0154366255061779e-17,-3.7371990892069003e-19,-1.1911192840564932e-20,-3.2965585270724612e-22,-7.9381396212777711e-24,-1.6645673157391326e-25,-3.0382129383104579e-27,-4.8189598192384729e-29,-6.6382139704921395e-31,-6.4914588371784775e-33;


            std::shared_ptr<LinearizedEulerEquationsDE<double>> de = std::make_shared<LinearizedEulerEquationsDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -2.0, 0.0, de);
            std::shared_ptr<RKF84<double>> RK = std::make_shared<RKF84<double>>();
            RK->SetBB(s);

            double dt = de->GetMaxDt(0, N);
            double Nsteps = ceil(0.1/dt);
            dt = 0.1/Nsteps;

            RK->ComputeTimeStep(dt);

            auto State = s->GetState();
            MatrixX<double> u = State[1];

            BOOST_CHECK(u.isApprox(uExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_LEE_p_0_01)
        {
            int K = 58;
            int N = 4;
            MatrixX<double> pExpected(N+1,K);
            pExpected <<
                    -7.3963232136305711e-16,-1.3311437967182032e-15,-4.5932562378387774e-16,1.9622483212336879e-16,3.1906493717426001e-16,6.7015701103159949e-16,1.3428103415554579e-15,7.908673170373785e-16,1.5708041257662749e-15,8.5966519105666765e-16,-9.6633935948702107e-17,8.1962313311294761e-17,-1.5559814801846029e-15,-1.4335907270569648e-15,-1.959999322358235e-15,-8.2064212720948035e-16,-3.3860734915644858e-16,9.7523823998193111e-16,5.9641817518958563e-16,4.0924091810553077e-16,2.2776665517376373e-15,1.9751412169671459e-15,1.4317386512701724e-14,3.3699970478437421e-14,6.5506553772815663e-14,1.3638246053167176e-13,3.1283706530311454e-13,1.6207866937276624e-12,1.8590148231499796e-11,2.6026677978975033e-10,3.38987744975514e-09,3.8371432885460276e-08,3.7127116892032995e-07,3.0581332482682705e-06,2.1423530931801949e-05,0.00012762341720718503,0.00064653900644287077,0.0027856110311726811,0.010208026195692107,0.031818991107568965,0.084367521989615585,0.19029315760862486,0.36512324285273545,0.59597673270092255,0.82755016188806407,0.9775382264200313,0.98230244509559328,0.83970323198499019,0.61062280904768285,0.37773368834780197,0.19877660976797459,0.088984951347005389,0.033888235751922423,0.010979367738286651,0.0030263775150106229,0.00070976998862638894,0.00014168712041724658,2.448505011698989e-05,
                    4.408944171354477e-16,4.5908778475187676e-16,-1.8976811695798163e-16,1.7163393233438812e-16,9.1010102760188962e-17,-7.6813881636780958e-16,-1.0636157994841863e-16,-4.5011763376475657e-16,-3.7263972017102635e-16,1.0336442375513754e-17,-8.7732944205016242e-16,-4.5330914087008737e-16,6.8548686726777376e-17,-1.2245687106781783e-17,-2.2323346600416086e-16,1.459339963753627e-16,-2.5259798564513693e-16,-4.4389542042679802e-16,-1.9656147036340918e-16,3.9744124461976084e-16,3.5638888522124108e-16,1.4323122019536105e-15,-1.6511684785964435e-15,-2.2156823717109198e-14,-9.6736144275842305e-14,-3.2573564860941977e-13,-8.7830622886935094e-13,-9.5700183681176949e-13,2.0708169190621648e-11,3.8838794865099633e-10,5.1693540579744754e-09,5.7385735337131309e-08,5.4063333697204577e-07,4.3305759714944071e-06,2.9497902273541653e-05,0.00017086473437397679,0.00084169789163313557,0.0035264238601733812,0.012566580052134615,0.038091554832505425,0.098217332055353726,0.21543123538820164,0.40197470500076848,0.6380616805549949,0.86159206130499333,0.98972541515866486,0.96716220693915267,0.80399361769012689,0.56855470607759995,0.3420247592246331,0.17502912236171969,0.076196675627791782,0.028219200020413837,0.0088910252280388642,0.0023833039912732785,0.00054357757326205897,0.00010555944588143916,1.8043636802500437e-05,
                    -4.520096632705745e-16,-1.7993493683237515e-16,5.1911847653500551e-17,1.6699626969700909e-16,-1.7932989045248721e-16,-2.6399944935585016e-16,2.8834873599110904e-16,1.4508919114788107e-16,2.3510808844992603e-16,5.8803325832359881e-16,1.7860900594988372e-18,1.3466024589709574e-17,2.2526405481999683e-16,-2.1821120963293132e-16,-2.6657063873507514e-16,1.7856888891301876e-17,7.125045727980638e-17,3.935527061187448e-16,3.2462669794750853e-16,4.9635445809823489e-17,-1.6319938201486415e-15,-7.1674779071253836e-15,-1.803756533807336e-14,-4.0858097179923361e-14,-8.4576611690341091e-14,-1.616675016024981e-13,-2.2350990247737349e-13,2.4220922053437082e-12,5.9292594069378398e-11,9.1739496730471799e-10,1.1511057784995632e-08,1.2146391359489335e-07,1.0865965466067126e-06,8.2582372832326162e-06,5.3355112809372446e-05,0.00029311653849854995,0.0013694273394240853,0.0054414385107077424,0.018390632480327775,0.05287039363742372,0.1292943676711612,0.26897405163148141,0.47600608771493974,0.71662104775553293,0.91778719152694954,0.99992646456226186,0.92675476226030373,0.73068330192123077,0.49007096687624818,0.27961092328505371,0.13571187423560238,0.056034786282604485,0.019682799189124939,0.0058819984462396158,0.0014955439680750145,0.00032356562428759042,5.9708304536363769e-05,1.0578276470594437e-05,
                    -2.2722065445097584e-17,-4.0554632929110299e-17,4.0169378135018941e-16,1.9321472866278349e-16,-4.4459347227358593e-16,-3.3969830105470376e-16,-6.0526748378142371e-16,-2.2667142356054128e-16,-4.6217485022756319e-16,-5.3054908520059025e-16,-2.123315710559544e-16,-5.3709672715966863e-16,7.4871812967427219e-17,-3.5088843210109607e-16,6.8348599647221277e-17,-1.2418248604099791e-16,-1.8224751567717509e-16,-4.816602151170486e-16,-6.0944625732690258e-16,-5.4631489206473663e-16,8.003359848148534e-18,7.8360687290841678e-15,3.1020767052315296e-14,1.0534361637523975e-13,3.1738102608143676e-13,8.9665149617640172e-13,2.8370939157939473e-12,1.5658125010508694e-11,1.7163067413324238e-10,2.2005668158528472e-09,2.5500635947644842e-08,2.5374063256529911e-07,2.1497580577618781e-06,1.5488079992648666e-05,9.4880739291911719e-05,0.00049427966464138861,0.0021899107639984199,0.0082523134439911414,0.026451401880417055,0.072121703497572534,0.16727919688490478,0.33005458632613721,0.55399074558516215,0.79103176963199284,0.96085854636840029,0.99288075049220959,0.87277893125699157,0.65264753571630707,0.41516372464839602,0.22466082878718605,0.10342044563934596,0.040500823258152949,0.013493076527292619,0.0038244008793663197,0.00092223642216612031,0.00018925033508082346,3.3327930356217177e-05,7.3570026410954553e-06,
                    -7.9711872700591596e-16,-1.6539533016678409e-15,-2.0370438985999389e-16,6.7110299845355026e-16,-5.3080779318737094e-16,1.1853675842696535e-15,1.4388071282810998e-15,7.7376912209238976e-16,2.0225620447782259e-15,1.0900675682894609e-15,1.8993372854330285e-15,3.2019333902938173e-15,1.6246712011520671e-15,9.9501362705114062e-16,6.8825591013068419e-16,2.4939654322032595e-16,6.9792066433127491e-16,2.5145914713573253e-15,2.6682200136439787e-15,2.6989018629685335e-15,9.6273588959607337e-15,1.4822402291976436e-14,3.8508599116994293e-14,7.6661195514691557e-14,1.1920743746769852e-13,2.4853435223641409e-13,1.4017888517709424e-12,1.8090981942586722e-11,2.5919833145182031e-10,3.3852859805695551e-09,3.8332951354020475e-08,3.7097482137604881e-07,3.05633449860354e-06,2.1414936030388478e-05,0.00012759120808180345,0.0006464464936820583,0.002785419226495678,0.010207788858011196,0.031819009055935182,0.084368295945833907,0.19029478332503164,0.36512460608310321,0.59597593030565565,0.82754672569070142,0.9775346568992489,0.98230209548060166,0.83970645131932486,0.61062651576130478,0.37773498114143983,0.19877548410582072,0.088983254335407963,0.033887300421214663,0.010979257455410785,0.0030266006124064315,0.00070997735858132087,0.00014179370206446345,2.4521870642636475e-05,6.9650273185161815e-06
                    ;


            std::shared_ptr<LinearizedEulerEquationsDE<double>> de = std::make_shared<LinearizedEulerEquationsDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -2.0, 0.0, de);
            std::shared_ptr<RKF84<double>> RK = std::make_shared<RKF84<double>>();
            RK->SetBB(s);
            RK->Calculate(0.01);

            auto State = s->GetState();
            MatrixX<double> p = State[0];

            BOOST_CHECK(p.isApprox(pExpected));
        }

        BOOST_AUTO_TEST_CASE(DG_LEE_u_0_01)
        {
            int K = 58;
            int N = 4;
            MatrixX<double> uExpected(N+1,K);
            uExpected <<
                    -5.4024481038038302e-18,-6.0857614221733357e-18,-3.9213060199466618e-18,-5.7383489231952023e-18,-1.8708407530584452e-18,-2.5054503155088433e-19,7.3169538381886641e-19,4.3084782799587509e-18,3.4379905306794452e-18,2.6879875354659373e-18,1.2505602618535078e-18,-2.3963978940707882e-18,-6.6680387619695277e-19,-2.5159447044477632e-18,-1.2573061360073835e-19,-1.0642297633975296e-18,-5.7049264215970773e-19,-3.2279429466232316e-19,3.0198416640371723e-18,2.5520601852795535e-18,-3.5573639422799303e-18,-6.0471425643280708e-18,-3.6344100051295906e-17,-8.584251681864503e-17,-1.6122607203694846e-16,-3.3138078612666454e-16,-7.58197633226718e-16,-3.9084566050969528e-15,-4.4795875895315501e-14,-6.2710814447323563e-13,-8.1677927359400733e-12,-9.2454601908493696e-11,-8.9456465538411219e-10,-7.3684631181133626e-09,-5.1619234588785515e-08,-3.0750407731064747e-07,-1.5578127037595198e-06,-6.7118305451935995e-06,-2.4595875468498847e-05,-7.6666725556149152e-05,-0.00020328053873121274,-0.00045850458426770365,-0.00087975144652854018,-0.0014359847064089931,-0.0019939526344795655,-0.002355343532804908,-0.0023668227479835351,-0.0020232350239379683,-0.0014712739056157531,-0.00091013586571526538,-0.00047894516003170392,-0.00021440607027658798,-8.1652496806556028e-05,-2.6454395338955767e-05,-7.2919473108388272e-06,-1.7101459255942641e-06,-3.411719535161423e-07,-5.6922310245286797e-08,
                    1.8826353121728223e-19,3.1352943738830515e-19,1.2640757701701426e-18,1.954809054449559e-18,5.8947601629241312e-19,1.501355195449209e-18,7.6001125738187377e-19,-1.4911819757158892e-18,8.6642884462813151e-20,-1.8787185133602235e-19,3.2280069858575308e-19,1.1060566898958596e-18,6.3874239344398853e-19,-1.6167895911105948e-20,2.2020065479864888e-18,2.4308874894160249e-19,8.8037484965325247e-19,-1.6165043613867077e-20,4.9685900450184316e-19,-1.460150787667145e-18,-2.429283863655157e-18,-5.0054287980301504e-18,3.6823882612769728e-18,5.3484311026910921e-17,2.3310592669010767e-16,7.8621206632737348e-16,2.1163057465707631e-15,2.3061573092658538e-15,-4.989457225439726e-14,-9.3580701608573235e-13,-1.2455374546740203e-11,-1.3826888354713142e-10,-1.3026367638932674e-09,-1.0434368530360765e-08,-7.1074144697262684e-08,-4.1169249060106335e-07,-2.0280410853021e-06,-8.4967926660090514e-06,-3.0278726964640649e-05,-9.1780244398009242e-05,-0.00023665116269993466,-0.00051907388716045143,-0.0009685437317802746,-0.001537386889032104,-0.002075975378418415,-0.0023847081299151096,-0.0023303428835003467,-0.0019371939804113674,-0.0013699123101404615,-0.00082409647308539558,-0.00042172643510519312,-0.00018359317549952915,-6.7993157161194145e-05,-2.1422608399622896e-05,-5.7424837651907433e-06,-1.3097013390936122e-06,-2.5402003167447312e-07,-4.048553980434001e-08,
                    -3.7588650146078435e-19,-9.624583668090286e-19,-1.3141695593090694e-19,-6.3465264250833966e-19,-1.0818854840994391e-18,-5.3152027187063007e-20,-1.210299312306007e-19,-1.0836276283152188e-19,-3.1425597999482669e-19,9.1599591885022458e-19,2.4285435171089062e-19,-3.0103404173908053e-19,-8.584995434258693e-20,-7.349079445015004e-19,-2.6243443388422627e-19,-4.0656445297925512e-19,-1.8496651111991713e-19,-8.1160345440149371e-19,-2.8794959609463779e-19,1.5338696147088846e-18,4.2404537461780195e-18,1.7325374250304843e-17,4.2467613544958017e-17,9.8924064728828641e-17,2.03532392111496e-16,3.8862129750983626e-16,5.3890855963220916e-16,-5.8367426930167577e-15,-1.4286413348547953e-13,-2.2104306983245775e-12,-2.7735484423437623e-11,-2.9266297290067322e-10,-2.6181156692762409e-09,-1.9897928543499439e-08,-1.2855724359549964e-07,-7.0625385754875657e-07,-3.2995863899565198e-06,-1.3110952246120699e-05,-4.4311573814731126e-05,-0.00012738933001812827,-0.00031153017293005653,-0.00064808339549305241,-0.0011469197111412183,-0.0017266728857083435,-0.0022113755427967821,-0.0024092871950515886,-0.0022329825850186881,-0.0017605553861678152,-0.0011808085364341172,-0.00067371255881516128,-0.00032699292638025215,-0.00013501382136754583,-4.742500344477539e-05,-1.4172465333454885e-05,-3.6034544744975672e-06,-7.7955392233557746e-07,-1.4318371974022048e-07,-1.9488994876961826e-08,
                    4.3622964761387066e-19,9.3895864340806397e-19,1.1840399280689642e-18,1.6426319540743743e-18,8.9957647092154561e-19,7.9612786952189701e-19,3.2745438639444117e-19,9.08846640723239e-20,-6.3179684952254979e-19,3.451001377121976e-19,1.8154618774431436e-19,1.0131899296379287e-18,3.1582105140698808e-19,1.7996218467571121e-18,-6.7958607324089627e-20,3.5439926066206257e-19,3.2403265433786979e-19,1.4335373956837748e-18,3.5640893834190786e-19,6.1317212240631266e-19,-1.2273793953369304e-18,-1.8659802323939468e-17,-7.5788625037956581e-17,-2.5292166403852664e-16,-7.6332986215603312e-16,-2.1612751203779811e-15,-6.8347854103265719e-15,-3.7727139326486315e-14,-4.135384994034788e-13,-5.3021866438695037e-12,-6.1442872321124322e-11,-6.1137901350058415e-10,-5.1797654560280469e-09,-3.7317976996488208e-08,-2.2861176129930197e-07,-1.1909492437687141e-06,-5.2765119726252272e-06,-1.9883655263453475e-05,-6.3733710527955734e-05,-0.00017377467531882673,-0.00040305326575164503,-0.00079525476791108413,-0.0013348209661594606,-0.0019059628692672632,-0.0023151544379163003,-0.0023923107979958334,-0.0021029297430474646,-0.0015725309874377964,-0.0010003222047765016,-0.000541312263660888,-0.00024918787952505695,-9.7585290838985675e-05,-3.2511087158780702e-05,-9.2147567584539024e-06,-2.2220833210572618e-06,-4.5584801156429375e-07,-7.888995864205781e-08,-5.9235315747136762e-09,
                    2.1713012322995274e-18,1.0923537420005675e-18,3.8108191908298781e-19,-5.2190827106241795e-18,-2.990405946553101e-18,-4.7595855506473667e-18,-6.5303723573998905e-18,4.1109745332329027e-19,-1.5164370713269244e-18,1.1426493031516303e-18,5.1400914427318125e-19,-4.3839979128596212e-18,-2.4143918873772233e-18,-1.4809560388753941e-18,-3.6344880051568437e-18,-2.4276821148320496e-18,-4.2005411121719009e-18,-5.3370652905229461e-18,-5.271445565739073e-18,-4.2681460745162652e-18,-2.044561785179177e-17,-3.2197353657671849e-17,-9.0832706779891707e-17,-1.8331183527239851e-16,-2.8498608142689894e-16,-5.9950024786352459e-16,-3.3770806107240224e-15,-4.3589228443583562e-14,-6.2453087899716822e-13,-8.1567273570466872e-12,-9.2361881349530078e-11,-8.938506171767563e-10,-7.3641290971399986e-09,-5.1598525483611948e-08,-3.0742647057440475e-07,-1.5575897975617983e-06,-6.7113683986599045e-06,-2.4595303611813239e-05,-7.6666768802098888e-05,-0.00020328240355114982,-0.00045850850137347127,-0.00087975473118353218,-0.0014359827730661846,-0.001993944355084468,-0.0023553349321717709,-0.0023668219055986216,-0.0020232427808094264,-0.0014712828368100821,-0.00091013898065547686,-0.00047894244778887715,-0.0002144019813875426,-8.1650243160684031e-05,-2.645412961981368e-05,-7.2924848946569517e-06,-1.7106458963975888e-06,-3.4143091696279424e-07,-5.7022943374064042e-08,-2.6650608330595668e-11
                    ;


            std::shared_ptr<LinearizedEulerEquationsDE<double>> de = std::make_shared<LinearizedEulerEquationsDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -2.0, 0.0, de);
            std::shared_ptr<RKF84<double>> RK = std::make_shared<RKF84<double>>();
            RK->SetBB(s);
            RK->Calculate(0.01);

            auto State = s->GetState();
            MatrixX<double> u = State[1];

            BOOST_CHECK(u.isApprox(uExpected));
        }


        BOOST_AUTO_TEST_CASE(DG_LEE_p_0_1)
        {
            int K = 58;
            int N = 4;
            MatrixX<double> pExpected(N+1,K);
            pExpected <<
                        -6.2026506926310434e-16,1.7767610678960148e-15,-7.0790343552179333e-16,2.0053812653915685e-15,9.7667539025285947e-17,-2.6185200576257561e-15,-1.2102221000439559e-15,-2.0309035581648248e-15,-2.0513257253832362e-15,2.6492037399986351e-16,1.535618468213129e-15,-1.5237293784366486e-15,3.3511361525106518e-15,-2.3562205332189865e-15,-1.9519939591652373e-15,2.9071913273718625e-15,-2.9079058079033137e-16,5.0608442940924246e-15,4.3650208276097893e-14,8.1862485472646476e-13,1.3766266921558186e-11,2.016674121749717e-10,2.5839190170180334e-09,2.8700654643400555e-08,2.7504265295648961e-07,2.2662569926696724e-06,1.6012643752330213e-05,9.6820634333594059e-05,0.00050017880690647219,0.0022048778033571066,0.0082853925806443789,0.026520227661061484,0.072265058384816935,0.16756814795187688,0.33056312462048604,0.55469796345378608,0.79173054963104839,0.96122415368949032,0.99271145503213476,0.87217374044753238,0.65191451746255891,0.41456994191409718,0.22429150952697813,0.10322658648222238,0.040406230815768759,0.013447663230772487,0.0038035641576525487,0.00091372366347238464,0.00018628472604093819,3.2199912479539994e-05,4.7135171577745051e-06,5.8355631322017958e-07,6.102133094702702e-08,5.3832830452233605e-09,4.0040693813585402e-10,2.5005861907553392e-11,1.2724551960501064e-12,7.5704043907680681e-14,
                        -9.6179497233029185e-16,2.6067087443427047e-16,-7.9154372062705287e-16,8.964440972398782e-17,-1.0252876276251119e-15,-6.3349403532369372e-16,1.5329103670664987e-15,8.9753850691880048e-16,1.4429310997273199e-15,-4.3054113316959626e-16,6.9381907225545674e-16,2.6592534601369244e-16,-1.0782098119216591e-16,-4.5817521529486788e-16,1.2565688429318921e-15,-8.2539599458606959e-16,1.9073690117073264e-15,7.5212175137586595e-15,6.1059906885433862e-14,1.2462121722803574e-12,2.1137736446026891e-11,3.0733930206331103e-10,3.881622780991977e-09,4.234190607916176e-08,3.9732020055270027e-07,3.1985478504910751e-06,2.204567120328527e-05,0.00012988647686253542,0.00065332247795482753,0.0028026780690549417,0.010245800074342743,0.031898175709713504,0.084532016536108562,0.19061690213521276,0.36567031306584219,0.5966983378203623,0.8282114370397865,0.97781961112276228,0.98204667537495138,0.83905546488070326,0.6098994481035962,0.37717576026040167,0.19844130174600239,0.088812627645993084,0.033805007001025206,0.010939783320780321,0.0030085315373137179,0.00070266032798352632,0.00013926141823606628,2.3398025761424049e-05,3.328758664227005e-06,4.0047270396973382e-07,4.0688226040992185e-08,3.4873824164176355e-09,2.521931694878475e-10,1.5379644267294288e-11,7.3421678570075013e-13,9.9495765111017942e-15,
                        1.4391713880676515e-16,8.9360443725482258e-16,-3.5021251993938133e-16,2.228611466906884e-16,-6.4449547716194998e-17,-6.9008511315035284e-16,7.1377952219130327e-16,6.222912048245798e-16,-1.6007048181983086e-15,3.1884133053289273e-17,-3.3142672488752731e-16,7.1360786451321421e-16,-8.7556586450017191e-16,9.0409124930674178e-16,3.7441498069221933e-16,7.669851190341375e-16,-3.0794296317739933e-15,1.1072660435649111e-14,1.9427675941154756e-13,3.254977652270926e-12,5.1948527095749835e-11,7.2096159874582085e-10,8.6647908125310216e-09,8.985787591128931e-08,8.0126267984332675e-07,6.127437143510808e-06,4.0106252516368315e-05,0.00022433859174562608,0.0010710717192444616,0.004360383394560392,0.015124424737506505,0.04466986613928918,0.11228836358253584,0.2401615498312587,0.43695655498948449,0.67623880263566494,0.89019077962745408,0.99679011436149945,0.94948905658307114,0.76943315158291059,0.53047720347071248,0.31115680002706309,0.15526832920019898,0.065904502336043447,0.023788533675235566,0.0072992326202581288,0.0019028988595761979,0.00042119382122227426,7.908517239411822e-05,1.2583238075657595e-05,1.694487756051008e-06,1.9286397033003879e-07,1.8528928864265389e-08,1.5008031595340157e-09,1.0251675671472505e-10,5.9963933748217587e-12,3.0918798546633347e-13,-1.5657774572819542e-14,
                        4.2592580452063414e-16,-2.1199884093819731e-16,2.2761144522311545e-16,-6.6117652116679062e-16,-9.4857462579793666e-16,7.7476851565355719e-16,1.009318460756068e-15,1.8046089412686597e-15,9.3867395489049546e-17,8.1601937142555479e-16,-8.1696937978848751e-16,1.8282394336221621e-15,-2.4481367606333679e-15,9.4661355170952959e-16,1.2527675338893218e-15,1.5372098303081707e-15,-1.513659164443829e-16,1.7283880888765266e-14,4.7887360152648712e-13,8.2114425026951699e-12,1.2452731708515652e-10,1.6503373641031119e-09,1.8919916414782819e-08,1.8687590921986408e-07,1.5854627629677096e-06,1.1526754932120129e-05,7.1684279417791829e-05,0.00038079486940781234,0.0017258979420738388,0.0066680609814475725,0.021944750852791448,0.061484837928345928,0.14660112655674523,0.29738726344746641,0.51316456334878113,0.75320544416522472,0.94036255450814954,0.99867336025065812,0.9022503136938782,0.69347856733786961,0.45347834940480031,0.25228502703720657,0.11939920740477646,0.048062995015081593,0.016451123834267369,0.004786012988588155,0.0011827612375888818,0.00024810848073497465,4.4137083751497011e-05,6.6511980505708395e-06,8.4797022372543528e-07,9.1341496022046557e-08,8.3030866435856084e-09,6.3627518398740681e-10,4.0988113382281981e-11,2.2332839462682189e-12,1.4505537013322609e-13,2.8424691557739404e-14,
                        1.0395772773498217e-16,5.2685452200302162e-16,1.9892823514311572e-16,-6.0680376972157503e-16,2.1678777896333655e-15,-5.7627456534456119e-16,-1.6776728502180137e-15,-7.06477419870505e-16,-7.958303022600481e-15,-1.5889532769031657e-16,-1.2051696353772604e-15,-2.0368625766670091e-15,1.9904749628669407e-15,1.6889784830242229e-15,-3.7674830736421231e-15,5.8738365366353266e-15,-2.5666620822019571e-15,2.7803583122866409e-14,7.7965700715748945e-13,1.3267954903692736e-11,1.9668446232594426e-10,2.5418241507718429e-09,2.8405829850467297e-08,2.7334097715241022e-07,2.2582644738156244e-06,1.598265248303172e-05,9.6733405444606772e-05,0.00049999382300260162,0.0022046380873280637,0.0082853806470221773,0.026520944360449789,0.072266651809125088,0.16756958119510826,0.33056248649424486,0.55469463672056663,0.79172688908305544,0.96122357284422844,0.9927145272557919,0.87217750798400695,0.65191597651629918,0.41456891894605069,0.22428980332493109,0.10322559491145029,0.040406081979825398,0.013447877735024719,0.0038037768435292413,0.00091383651606093174,0.00018632693223145924,3.2211936221725119e-05,4.7162168167095373e-06,5.8404267923942843e-07,6.109233449498645e-08,5.3917369711665304e-09,4.0126184235147838e-10,2.5084115204049905e-11,1.2725458874532717e-12,7.1393490527213012e-14,3.9619953599032044e-14
                        ;


            std::shared_ptr<LinearizedEulerEquationsDE<double>> de = std::make_shared<LinearizedEulerEquationsDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -2.0, 0.0, de);
            std::shared_ptr<RKF84<double>> RK = std::make_shared<RKF84<double>>();
            RK->SetBB(s);
            RK->Calculate(0.1);

            auto State = s->GetState();
            MatrixX<double> p = State[0];

            BOOST_CHECK(p.isApprox(pExpected, 1e-10));
        }

        BOOST_AUTO_TEST_CASE(DG_LEE_u_0_1)
        {
            int K = 58;
            int N = 4;
            MatrixX<double> uExpected(N+1,K);
            uExpected <<
                    5.3560964851910406e-18,5.592535935784869e-18,-1.1226215929365572e-18,1.0339437091146811e-17,-4.0776151049880744e-18,5.6220009754147286e-18,-3.5399591120410574e-19,-4.6673096123853452e-18,5.0701650834413866e-18,-9.1992505951904437e-18,-2.792604599938511e-19,-2.4741195669417121e-21,-1.3764275879167079e-17,3.9847898250793673e-18,-2.9108033686639991e-18,-4.9399581969982037e-18,9.2951713520191178e-18,1.0261797442181518e-17,8.096757022122732e-17,1.977451969532907e-15,3.3145118385581091e-14,4.8591310987307165e-13,6.225874841359655e-12,6.9153202075237714e-11,6.6270547846702485e-10,5.4604654975567948e-09,3.8581894686297381e-08,2.3328586931782279e-07,1.2051630168809172e-06,5.3125745208164505e-06,1.9963358264827986e-05,6.3899543794564316e-05,0.00017412008381277396,0.00040374948305394029,0.00079648007281518879,0.0013365249824200572,0.0019076465547816482,0.0023160353557321249,0.0023919028866157452,0.0021014715573513709,0.0015707648060683732,0.0009988915064310874,0.00054042240206003027,0.00024872078279213939,9.7357373721825957e-05,3.2401665495926436e-05,9.1645523399636384e-06,2.2015846167183351e-06,4.4884641120207872e-07,7.7584542029569466e-08,1.1357051669886498e-08,1.4060581367976213e-09,1.4702871943688873e-10,1.297082298642316e-11,9.6477263009772957e-13,6.0260761836035591e-14,3.0644369089180957e-15,1.8654185113686039e-16,
                    -3.0533250217530624e-19,1.4123264609724791e-18,-3.8195436674666482e-18,-1.0009658917419395e-18,-2.0295453117001253e-18,-3.8426730134143483e-18,-1.3401060567522421e-18,1.1947253616547241e-19,-1.2941203482190449e-18,1.6361072881768245e-18,2.4096612875091331e-18,2.1672450053112891e-18,-2.7525714587162117e-18,6.9680648374262299e-18,-2.5548326400680061e-18,4.1494359077939313e-19,-8.0236502851110232e-19,1.7168071324866465e-17,1.4990443944475002e-16,3.006787421135386e-15,5.0930843771865191e-14,7.4052503119505412e-13,9.3526291268833257e-12,1.0202131263816601e-10,9.5732886816176746e-10,7.7067870989923128e-09,5.3118259417129368e-08,3.1295683893053545e-07,1.5741572367293123e-06,6.7529529649744356e-06,2.468689028344594e-05,7.6857518034151355e-05,0.00020367688248104749,0.00045928463517146687,0.00088106959271821734,0.0014377233882378634,0.0019955459534004515,0.0023560215192221256,0.0023662064799531393,0.0020216742521762289,0.0014695309931898872,0.00090879155786425766,0.00047813724729779163,0.00021399086245812152,8.1451960101740789e-05,2.6359018193334029e-05,7.2489495634399621e-06,1.6930350287535785e-06,3.3554542620018188e-07,5.637670954123369e-08,8.0205254173946161e-09,9.6492471670568264e-10,9.8036829948533104e-11,8.4027250276995347e-12,6.0764753764219139e-13,3.7059201945322518e-14,1.791389628982891e-15,5.0682451065197045e-17,
                    1.0126327167996565e-18,1.5244901563273054e-18,-8.0434037841841574e-19,1.9080597341687256e-18,-1.7072082013536844e-18,-3.8026876547755357e-19,1.4843621138614589e-18,-1.7951347788142379e-19,2.5051163293486981e-18,1.2650236126319876e-18,2.423306885362691e-18,1.7511795715649968e-18,-2.6868644499722336e-18,1.3042862584180571e-18,4.9297499528503737e-19,-3.9478973194357994e-18,-3.8147329751163175e-18,2.7832180306610552e-17,4.6351848374567691e-16,7.8466632885927737e-15,1.2516109359952007e-13,1.7371313579206153e-12,2.0877510558065798e-11,2.1650935058043029e-10,1.930613886913294e-09,1.4763841519080257e-08,9.6634586698704665e-08,5.4053584499371116e-07,2.5807091517328724e-06,1.0506188455200358e-05,3.644176261356448e-05,0.00010763045114639895,0.00027055481189922526,0.00057866069881998044,0.0010528312531370883,0.0016293733046663333,0.0021448829714176129,0.0024017302709719826,0.0022877600573044652,0.0018539217685056798,0.0012781659240795021,0.00074972122503689273,0.00037411350793966361,0.00015879455060126307,5.7317624449400791e-05,1.7587240971154065e-05,4.5849670134169941e-06,1.0148515076583174e-06,1.9055290555985749e-07,3.0318863879336528e-08,4.0828078801957427e-09,4.6469886426547279e-10,4.4644789967114568e-11,3.6161341089776349e-12,2.4700911959147969e-13,1.4434895845007711e-14,7.3285080859829152e-16,1.1311332818417763e-17,
                    2.1149682224526109e-19,-2.7639994813770023e-18,4.8122349320486201e-19,-2.8169152477097017e-18,-6.3131006937574869e-19,-2.6520518017273202e-18,-1.9154178473144171e-19,4.8315640040038705e-19,-2.1394337509310566e-18,2.8505774337573794e-18,2.2435443316853735e-18,-2.4912985352922952e-18,6.9759383394038915e-18,-1.0619030466892401e-18,1.7136223272287991e-18,2.6432455184928857e-18,-2.0449979254072839e-18,3.9872741391582556e-17,1.1613364343701341e-15,1.9784174821058653e-14,3.0004986567169445e-13,3.9764299243910636e-12,4.5586861557817839e-11,4.5027084370030459e-10,3.8201160444120296e-09,2.7773305380862556e-08,1.7272071758537265e-07,9.175116724247904e-07,4.1584896081707564e-06,1.6066455392242797e-05,5.2875095421507607e-05,0.00014814552665673976,0.00035323019193008977,0.00071654401717337617,0.001236451734449996,0.001814821685577479,0.0022657700756768318,0.0024062678848532745,0.0021739399891426607,0.0016709119035680981,0.0010926399282095343,0.00060787178526180356,0.00028768813677271081,0.00011580607429603182,3.9638396824968856e-05,1.1531727799407097e-05,2.849821067369096e-06,5.9780854572997193e-07,1.0634673096121649e-07,1.6025824760500542e-08,2.0431540451566474e-09,2.2008408302572882e-10,2.0005990720069867e-11,1.533089665047344e-12,9.8768142187000713e-14,5.3776463122491947e-15,3.2127515558959538e-16,1.2391616101989425e-17,
                    2.491566697479427e-18,-2.4601290210609848e-18,1.0627105523481489e-18,7.6521762770840782e-18,-3.9378006345398311e-18,1.0797966557861469e-17,1.108508346253618e-17,4.1879465222606851e-18,1.9846550303332339e-17,3.2643250028257558e-18,5.5203776254655811e-18,3.5937547925721031e-18,-2.2771925657525459e-18,-6.5000128343780774e-18,4.6118056663751668e-18,-1.0643018344606813e-17,1.7724300385279491e-17,8.634721959011418e-17,1.8608851473241363e-15,3.1978244408757164e-14,4.7387788447029176e-13,6.1244271511294484e-12,6.8442860629813775e-11,6.5860535266303884e-10,5.4412078119746535e-09,3.8509631813731202e-08,2.3307569437948152e-07,1.2047173048115674e-06,5.3119969334755174e-06,1.9963329511190162e-05,6.3901270656255976e-05,0.00017412392311187927,0.00040375293640243634,0.00079647853527271622,0.0013365169667748603,0.0019076377348217753,0.002316033956206063,0.0023919102890292681,0.002101480635096267,0.0015707683216064242,0.00099888904162603897,0.00054041829102697604,0.00024871839363768054,9.7357015106907326e-05,3.2402182336265626e-05,9.1650647990026313e-06,2.2018565310053194e-06,4.4894810552688707e-07,7.761351281750461e-08,1.1363556416605759e-08,1.4072300275557403e-09,1.471997858003191e-10,1.2991187672407454e-11,9.6681312242005132e-13,6.0451142028407897e-14,3.0868839384586619e-15,1.4026264644295481e-16,1.3179052306563681e-17
                    ;


            std::shared_ptr<LinearizedEulerEquationsDE<double>> de = std::make_shared<LinearizedEulerEquationsDE<double>>();
            std::shared_ptr<System1D<double>> s = std::make_shared<System1D<double>>(K, N, -2.0, 0.0, de);
            std::shared_ptr<RKF84<double>> RK = std::make_shared<RKF84<double>>();
            RK->SetBB(s);
            RK->Calculate(0.1);

            auto State = s->GetState();
            MatrixX<double> u = State[1];

            BOOST_CHECK(u.isApprox(uExpected, 1e-10));
        }
    BOOST_AUTO_TEST_SUITE_END()
BOOST_AUTO_TEST_SUITE_END()